(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7343],{1089:(n,e,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/en-US/api",function(){return t(6753)}])},6753:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>l});var o=t(7876),r=t(7328),i=t.n(r),s=t(4213),a=t(8419);function l(){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i(),{children:[(0,o.jsx)("title",{children:"API - ".concat(s.eh)}),(0,o.jsx)("meta",{name:"keywords",content:s.p8}),(0,o.jsx)("meta",{name:"description",content:s.vn}),(0,o.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"})]}),(0,o.jsx)(a.A,{editorId:"md-api-en",value:"> Use it online: [Go](https://codesandbox.io/s/elated-khorana-65jmr)\n\n## \uD83D\uDD16 MdPreview Props\n\nThis is the props of `MdPreview`, which is also part of `MdEditor`:\n\n### \uD83D\uDCC3 value\n\n- **type**: `string`\n- **default**: `''`\n\n  Markdown content.\n\n  ```jsx\n  <MdEditor value=\"xxx\" />\n  ```\n\n### \uD83D\uDCC3 modelValue\n\n- **type**: `string`\n- **default**: `''`\n\n  Deprecated. Starting from version 5.x, Replace with `value`.\n\n---\n\n### \uD83D\uDECD theme\n\n- **type**: `'light' | 'dark'`\n- **default**: `'light'`\n\n  Editor's theme.\n\n  ```jsx\n  <MdEditor theme=\"dark\" />\n  ```\n\n---\n\n### \uD83C\uDF80 className\n\n- **type**: `string`\n- **default**: `''`\n\n  ...\n\n---\n\n### \uD83D\uDD24 language\n\n- **type**: `string`\n- **default**: `'zh-CN'`\n\n  Build-in language('zh-CN', 'en-US').\n\n  You can install the existing language also: [md-editor-extension](https://github.com/imzbf/md-editor-extension). Refer to extension library for the usage and the way to contribute~\n\n---\n\n### \uD83C\uDFB2 editorId\n\n- **type**: `string`\n- **default**: `'md-editor-v-\\d'`\n\n  Deprecated. Starting from version 5.x, Replace with `id`.\n\n  Unique identifier of the editor, use the default prefix and `useId` for concatenation. ~~When using server-side rendering, make sure to set this attribute to a constant value.~~, Starting from version 5.0, there is no such limitation.\n\n---\n\n### \uD83C\uDFB2 id\n\n- **type**: `string`\n- **default**: `'md-editor-v-\\d'`\n\n  Unique identifier of the editor, use the default prefix and `useId` for concatenation.\n\n---\n\n### \uD83D\uDD22 showCodeRowNumber\n\n- **type**: `boolean`\n- **default**: `true`\n\n  Show row number for code block or not.\n\n---\n\n### \uD83D\uDD26 previewTheme\n\n- **type**: `'default' | 'github' | 'vuepress' | 'mk-cute' | 'smart-blue' | 'cyanosis'`\n- **default**: `'default'`\n\n  Preview themes.\n\n  Custom:\n  1. Write css\n\n  ```css\n  .xxx-theme {\n    color: red;\n  }\n  ```\n\n  2. Set `previewTheme`\n\n  ```jsx\n  <MdEditor previewTheme=\"xxx\" />\n  ```\n\n  For more, refer to [markdown-theme](https://github.com/imzbf/markdown-theme).\n\n---\n\n### \uD83C\uDF85\uD83C\uDFFB style\n\n- **type**: `CSSProperties`\n- **default**: `{}`\n\n  Editor inline style.\n\n---\n\n### ☝️ noMermaid\n\n- **type**: `boolean`\n- **default**: `false`\n\n  do not want to use `mermaid`, set it to `true`.\n\n  ```jsx\n  <MdEditor noMermaid />\n  ```\n\n---\n\n### ❌ noKatex\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Do not want to use `katex`, set it to `true`.\n\n---\n\n### \uD83E\uDD89 codeTheme\n\n- **type**: `'atom'|'a11y'|'github'|'gradient'|'kimbie'|'paraiso'|'qtcreator'|'stackoverflow'`\n- **default**: `'atom'`\n\n  Highlight code css name. Get Them from `highlight.js`.\n\n  Custom:\n  1. Config `editorExtensions`\n\n  ```js\n  import { config } from 'md-editor-rt';\n\n  config({\n    editorExtensions: {\n      highlight: {\n        css: {\n          atom: {\n            light: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/atom-one-light.min.css',\n            dark: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/atom-one-dark.min.css'\n          },\n          xxx: {\n            light: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/xxx-light.css',\n            dark: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/xxx-dark.css'\n          }\n        }\n      }\n    }\n  });\n  ```\n\n  2. Set `codeTheme`\n\n  ```jsx\n  <MdEditor codeTheme=\"xxx\" />\n  ```\n\n---\n\n### \uD83C\uDFB1 mdHeadingId\n\n- **type**: `MdHeadingId`\n- **default**: `(text) => text`\n\n  Title `ID` generator.\n\n  ```jsx\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const mdHeadingId = ({ index }) => `heading-${index}`;\n\n  export default () => {\n    return <MdEditor mdHeadingId={mdHeadingId} />;\n  };\n  ```\n\n  ```ts\n  type MdHeadingId = (options: {\n    text: string;\n    level: number;\n    index: number;\n    currentToken?: Token;\n    nextToken?: Token;\n  }) => string;\n  ```\n\n---\n\n### \uD83D\uDC23 sanitize\n\n- **type**: `(html: string) => string`\n- **default**: `(html) => html`\n\n  This attribute is used to alter the compiled HTML content.\n\n  !!! warning\n\n  This is a reserved attribute.\n\n  Basic solution for dangerous code has been built-in since version 3.x. eg: `<script>alert(123)<\/script>`. Prior to version 4.11.3, it was recommended to utilize this attribute for cleaning more complex content to prevent XSS attacks.\n\n  A more comprehensive solution has been implemented since version 4.11.3. Refer to [Modify XSS configuration](https://imzbf.github.io/md-editor-rt/en-US/demo#%F0%9F%94%8F%20Modify%20XSS%20configuration)\n\n  !!!\n\n  `sanitize-html` example:\n\n  ```jsx\n  import sanitizeHtml from 'sanitize-html';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const sanitize = (html) => sanitizeHtml(html);\n\n  export default () => {\n    return <MdEditor sanitize={sanitize} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDC85 formatCopiedText\n\n- **type**: `(text: string) => string`\n- **default**: `(text) => text`\n\n  Format copied code\n\n  ```jsx\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  export default () => {\n    const formatCopiedText = (text: string) => {\n      return `${text}  - from md-editor-rt`;\n    };\n\n    return <MdEditor formatCopiedText={formatCopiedText} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDEC1 codeStyleReverse\n\n- **type**: `boolean`\n- **default**: `true`\n\n  Code style will be reversed to dark while code block of the theme has a dark background.\n\n---\n\n### \uD83E\uDDFC codeStyleReverseList\n\n- **type**: `Array`\n- **default**: `['default', 'mk-cute']`\n\n  Themes to be reversed.\n\n---\n\n### \uD83D\uDD4A noHighlight\n\n- **type**: `boolean`\n- **default**: `false`\n\n  never highlight code\n\n---\n\n### \uD83D\uDD4A noImgZoomIn\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Enable the function of enlarging images.\n\n  ```html\n  <MdEditor noImgZoomIn />\n  ```\n\n  After version `4.15.4`, it is also possible to disable zooming by setting the class `.not-zoom`.\n\n  ```markdown\n  <img class=\"not-zoom\">\n  ```\n\n---\n\n### \uD83D\uDE2C customIcon\n\n- **type**: `CustomIcon`\n- **default**: `{}`\n\n  Customized icons\n\n  !!! warning Type Warning\n\n  The icon corresponding to `copy` and `collapse-tips` can only be a string, while others can be components or strings\n\n  !!!\n\n  ```tsx\n  import React from 'react';\n  import type { CustomIcon } from 'md-editor-rt';\n  import { MdEditor, StrIcon } from 'md-editor-rt';\n  // Assuming you have installed an icon library or customized icon components\n  import { IconFont } from 'tdesign-icons-react';\n  import 'md-editor-rt/lib/style.css';\n\n  const customIcon: CustomIcon = {\n    bold: {\n      component: 'A'\n    },\n    // Demonstrating the use of default icons\n    copy: StrIcon('copy', {}),\n    // copy: '<i class=\"fa fa-car\"></i>',\n    // 'collapse-tips': '<i class=\"fa fa-car\"></i>',\n    preview: {\n      component: '<i class=\"fa fa-car\"></i>'\n    },\n    github: {\n      component: IconFont,\n      props: {\n        name: 'sneer'\n      }\n    }\n  };\n\n  export default () => {\n    return <MdEditor modelValue=\"\" customIcon={customIcon} />;\n  };\n  ```\n\n  Type `CustomIcon`\n\n  ```ts\n  type IconName =\n    | 'bold'\n    | 'underline'\n    | 'italic'\n    | 'strike-through'\n    | 'title'\n    | 'sub'\n    | 'sup'\n    | 'quote'\n    | 'unordered-list'\n    | 'ordered-list'\n    | 'task'\n    | 'code-row'\n    | 'code'\n    | 'link'\n    | 'image'\n    | 'table'\n    | 'revoke'\n    | 'next'\n    | 'save'\n    | 'prettier'\n    | 'minimize'\n    | 'maximize'\n    | 'fullscreen-exit'\n    | 'fullscreen'\n    | 'preview-only'\n    | 'preview'\n    | 'preview-html'\n    | 'catalog'\n    | 'github'\n    | 'mermaid'\n    | 'formula'\n    | 'close'\n    | 'delete'\n    | 'upload';\n\n  type CustomIcon = {\n    [key in IconName]?: {\n      component: Component | JSX.Element | string;\n      props: {\n        [key: string | number | symbol]: any;\n      };\n    };\n  } & {\n    copy?: string;\n    'collapse-tips'?: string;\n  };\n  ```\n\n---\n\n### \uD83D\uDD4A sanitizeMermaid\n\n- **type**: `(h: string) => Promise<string>`\n- **default**: `(h: string) => Promise.resolve(h)`\n\n  Convert the generated mermaid code\n\n---\n\n### \uD83D\uDD79 codeFoldable\n\n- **type**: `boolean`\n- **default**: `true`\n\n  Whether to enable code folding feature\n\n---\n\n### ⏲ autoFoldThreshold\n\n- **type**: `number`\n- **default**: `30`\n\n  Threshold for triggering automatic code folding by line count\n\n---\n\n## \uD83D\uDD29 MdEditor Props\n\nExcept for the same as `MdPreview`:\n\n### \uD83D\uDCBB pageFullscreen\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Screenfull in web page.\n\n---\n\n### \uD83D\uDCF1 preview\n\n- **type**: `boolean`\n- **default**: `true`\n\n  Preview content in editor.\n\n---\n\n### \uD83D\uDCC0 htmlPreview\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Preview html in editor. Set `preview` to `false` when `htmlPreview` is `true`.\n\n---\n\n### \uD83E\uDDF1 toolbars\n\n- **type**: `Array`\n- **default**: `[all]`\n\n  Show contents of toolbar.\n\n  You can sort the toolbar as you like, split tools by `'-'`, the left and right toolbars are divided by `'='`!\n\n  _[all]_\n\n  ```js\n  [\n    'bold',\n    'underline',\n    'italic',\n    '-',\n    'strikeThrough',\n    'sub',\n    'sup',\n    'quote',\n    'unorderedList',\n    'orderedList',\n    'task',\n    '-',\n    'codeRow',\n    'code',\n    'link',\n    'image',\n    'table',\n    'mermaid',\n    'katex',\n    '-',\n    'revoke',\n    'next',\n    'save',\n    '=',\n    'pageFullscreen',\n    'fullscreen',\n    'preview',\n    'previewOnly',\n    'htmlPreview',\n    'catalog',\n    'github'\n  ];\n  ```\n\n---\n\n### \uD83E\uDDF1 toolbarsExclude\n\n- **type**: `Array`\n- **default**: `[]`\n\n  Don't show some item of toolbars, all keys.\n\n---\n\n### \uD83E\uDDF1 floatingToolbars\n\n- **type**: `Array`\n- **default**: `[]`\n\n  Show contents of floating toolbar.\n\n  You can sort the toolbar as you like, split tools by `'-'`.\n\n---\n\n### \uD83D\uDCAA defToolbars\n\n- **type**: `Array<VNode>`\n- **default**: `[]`\n\n  Custom toolbar in `DropdownToolbar`, `NormalToolbar` or `ModalToolbar`. To display them, put index of `defToolbars` into `toolbars`(this is not standard).\n\n  ```jsx\n  import { MdEditor, NormalToolbar } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const handler = () => {\n    console.log('NormalToolbar clicked!');\n  };\n\n  const toolbars = ['github', '=', 0];\n\n  const defToolbars = [\n    <NormalToolbar\n      title=\"mark\"\n      onClick={handler}\n      trigger={\n        <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n          <use xlinkHref=\"#icon-mark\"></use>\n        </svg>\n      }\n    />\n  ];\n\n  export default () => {\n    return <MdEditor modelValue=\"\" toolbars={toolbars} defToolbars={defToolbars} />;\n  };\n  ```\n\nFor more info, click [Internal Components](#%F0%9F%AA%A4%20Internal%20Components). Get source code of **mark**, **emoji** and **modal preview** at [md-editor-extension](https://github.com/imzbf/md-editor-extension/tree/develop/packages/v3/components) branch.\n\n---\n\n### \uD83E\uDE92 noPrettier\n\n- **type**: `boolean`\n- **default**: `true`\n\n  Use prettier to beautify content or not.\n\n---\n\n### \uD83E\uDD0F tabWidth\n\n- **type**: `number`\n- **default**: `2`\n\n  One tab eq some space.\n\n---\n\n### \uD83D\uDCC5 tableShape\n\n- **type**: `[number, number] \\| [number, number, number, number]`\n- **default**: `[6, 4]`\n\n  Preset the size of the table, [columns, rows, Maximum number of columns, Maximum number of rows]\n\n  ```jsx\n  const tableShape = [8, 4];\n\n  () => <MdEditor tableShape={tableShape}>\n  ```\n\n  ![Preview](https://imzbf.github.io/md-editor-v3/imgs/20211216165424.png)\n\n---\n\n### \uD83E\uDEA7 placeholder\n\n- **type**: `string`\n- **default**: `''`\n\n  em-\\_-!\n\n---\n\n### \uD83E\uDDB6 footers\n\n- **type**: `Array<'markdownTotal' \\| '=' \\| 'scrollSwitch' \\| number>`\n- **default**: `['markdownTotal', '=', 'scrollSwitch']`\n\n  Show contents of footer, they are divided by `'='`. Set it to [] to hidden footer.\n\n---\n\n### \uD83E\uDDBF defFooters\n\n- **type**: `Array<ReactNode>`\n- **default**: `[]`\n\n  Custom footer.\n\n  [Get](https://github.com/imzbf/md-editor-rt/blob/docs/src/pages/Preview/index.tsx) example code.\n\n---\n\n### ⛵️ scrollAuto\n\n- **type**: `boolean`\n- **default**: `true`\n\n  Scroll default setting.\n\n---\n\n### \uD83E\uDD79 noUploadImg\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Not show the entrance to upload pictures\n\n  ```jsx\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  export default () => {\n    return <MdEditor noUploadImg />;\n  };\n  ```\n\n---\n\n### \uD83D\uDD2C autoFocus\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Same as `autofocus` in native textarea.\n\n---\n\n### \uD83D\uDD29 disabled\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Same as `disabled` in native textarea.\n\n---\n\n### \uD83D\uDD12 readOnly\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Same as `readonly` in native textarea.\n\n---\n\n### \uD83D\uDCCF maxLength\n\n- **type**: `number`\n- **default**: ``\n\n  Same as `maxlength` in native textarea.\n\n---\n\n### \uD83D\uDCE5 autoDetectCode\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Auto detect the type of pasted code, only support that copied from `vscode`.\n\n---\n\n### \uD83D\uDCDD completions\n\n- **type**: `Array<CompletionSource>`\n- **default**: `[]`\n\n  Additional completion sources.\n\n  ```tsx\n  import { useMemo, useState } from 'react';\n  import { CompletionSource } from '@codemirror/autocomplete';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  export default () => {\n    const [t, s] = useState('');\n\n    const completions = useMemo<Array<CompletionSource>>(() => {\n      return [\n        (context) => {\n          const word = context.matchBefore(/@\\w*/);\n\n          if (word === null || (word.from == word.to && context.explicit)) {\n            return null;\n          }\n\n          return {\n            from: word.from,\n            options: [\n              {\n                label: '@imzbf',\n                type: 'text'\n              }\n            ]\n          };\n        }\n      ];\n    }, []);\n\n    return <MdEditor modelValue={t} onChange={s} completions={completions} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDCE5 showToolbarName\n\n- **type**: `boolean`\n- **default**: `false`\n\n  Show toolbar name or not\n\n![](https://imzbf.github.io/md-editor-v3/imgs/showToolbarName.png)\n\n---\n\n### \uD83D\uDCE5 inputBoxWidth\n\n- **type**: `string`\n- **default**: `50%`\n\n  Default width of input box\n\n![](https://imzbf.github.io/md-editor-v3/imgs/drag-width.gif)\n\n---\n\n### \uD83D\uDCE5 transformImgUrl\n\n- **type**: `(imgUrl: string) => string | Promise<string>`\n- **default**: `t => t`\n\n  Transform image links\n\n---\n\n### \uD83D\uDD16 catalogLayout\n\n- **type**: `'fixed' | 'flat'`\n- **default**: `fixed`\n\n  \\>=5.3.0, the built-in catalog status: 'fixed' - floats above the content; 'flat' - displays on the right side.\n\n---\n\n### \uD83D\uDCC7 catalogMaxDepth\n\n- **type**: `number`\n- **default**: `undefined`\n\n  \\>=5.5.0 Controls the maximum depth of the catalog to be displayed.\n\n### \uD83D\uDD8C noEcharts\n\n- **type**: `boolean`\n- **default**: `false`\n\n  \\>=6.0.0 Disable echarts preview\n\n---\n\n## \uD83E\uDDF5 MdPreview Events\n\n### \uD83D\uDCDE onChange\n\n- **type**: `(v: string) => void`\n\n  Content changed event(bind to `oninput` of `textarea`).\n\n---\n\n### \uD83D\uDE81 onHtmlChanged\n\n- **type**: `(h: string) => void`\n\n  Compile markdown successful event, you can use it to get the html code.\n\n---\n\n### \uD83D\uDDD2 onGetCatalog\n\n- **type**: `(list: HeadList[]) => void`\n\n  Get catalogue of article.\n\n---\n\n### \uD83D\uDD03 onRemount\n\n- **type**: `() => void`\n\n  \\>=5.3.0, the 'content re-mount' event allows for correctly retrieving nodes within the content.\n\n---\n\n## \uD83E\uDEA2 MdEditor Events\n\nExcept for the same as `MdPreview`:\n\n### \uD83D\uDCBE onSave\n\n- **type**: `(v: string, h: Promise<string>) => void`\n\n  Saving content event, `ctrl+s` and clicking button will trigger it.\n\n  ```jsx\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const onSave = (v, h) => {\n    console.log(v);\n\n    h.then((html) => {\n      console.log(html);\n    });\n  };\n\n  export default () => <MdEditor onSave={onSave} />;\n  ```\n\n---\n\n### \uD83D\uDCF8 onUploadImg\n\n- **type**: `files: Array<File>, callback: (urls: string[] | { url: string; alt: string; title: string }[]) => void`\n\n  Uploading picture event, when picture is uploading the modal will not close, please provide right urls to the callback function.\n\n  ```jsx\n  import React, { useState } from 'react';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const onUploadImg = async (files, callback) => {\n    const res = await Promise.all(\n      files.map((file) => {\n        return new Promise((rev, rej) => {\n          const form = new FormData();\n          form.append('file', file);\n\n          axios\n            .post('/api/img/upload', form, {\n              headers: {\n                'Content-Type': 'multipart/form-data'\n              }\n            })\n            .then((res) => rev(res))\n            .catch((error) => rej(error));\n        });\n      })\n    );\n\n    // Approach 1\n    callback(res.map((item) => item.data.url));\n    // Approach 2\n    // callback(\n    //   res.map((item: any) => ({\n    //     url: item.data.url,\n    //     alt: 'alt',\n    //     title: 'title'\n    //   }))\n    // );\n  };\n\n  export default () => {\n    const [text, setText] = useState('# Hello Editor');\n\n    return <MdEditor modelValue={text} onChange={setText} onUploadImg={onUploadImg} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDC80 onError\n\n- **type**: `(err: InnerError) => void`\n\n  Captures execution error events, currently supports `Cropper`, `fullscreen`, `prettier` instances of unloaded completed operations, inputs exceeding restricted lengths, and `mermaid` rendering errors.\n\n  ```ts\n  export interface InnerError {\n    name: 'Cropper' | 'fullscreen' | 'prettier' | 'overlength' | 'mermaid'; // Component version greater than or equal to 5.4.0 to catch mermaid errors\n    message: string;\n    data?: any;\n    error?: Error;\n  }\n  ```\n\n  ```jsx\n  const onError = (err) => {\n    alert(err.message);\n  };\n\n  export default () => <MdEditor onError={onError} />;\n  ```\n\n---\n\n### \uD83D\uDC3E onBlur\n\n- **type**: `(event: FocusEvent<HTMLTextAreaElement, Element>) => void`\n\n  Textarea has lost focus.\n\n  ```jsx\n  const onBlur = (err) => {\n    console.log('onBlur', e);\n  };\n\n  export default () => <MdEditor onBlur={onBlur} />;\n  ```\n\n---\n\n### \uD83D\uDD16 onFocus\n\n- **type**: `(event: FocusEvent<HTMLTextAreaElement, Element>) => void`\n\n  Textarea has received focus.\n\n---\n\n### \uD83D\uDD16 onInput\n\n- **type**: `(event: Event) => void`\n\n  Element gets input.\n\n---\n\n### \uD83D\uDD16 onDrop\n\n- **type**: `(event: DragEvent) => void`\n\n  The event occurs when a selection is being dragged.\n\n  ```jsx\n  import { useState } from 'react';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const onDrop = (e) => {\n    e.preventDefault();\n    console.log(e.dataTransfer?.files[0]);\n  };\n\n  export default () => {\n    const [text, setText] = useState('');\n    return <MdEditor modelValue={text} onChange={setText} onDrop={onDrop} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDD16 onInputBoxWidthChange\n\n- **type**: `(width: string) => void`\n\n  Event occurs when width of input box has been changed\n\n---\n\n## \uD83E\uDD31\uD83C\uDFFC Expose\n\nAfter 2.5.0, Editor exposes several methods on the instance, used to get or change the internal status of the editor.\n\n```jsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport { MdEditor, ExposeParam } from 'md-editor-rt';\n//\n// import type { ExposePreviewParam } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('#Hello Editor');\n\n  const editorRef = useRef<ExposeParam>();\n\n  useEffect(() => {\n    editorRef.current?.on('catalog', console.log);\n  }, []);\n\n  return <MdEditor ref={editorRef} modelValue={text} onChange={setText} />;\n};\n```\n\n| Name                 | MdEditor | MdPreview |\n| -------------------- | -------- | --------- |\n| on                   | √        | \xd7         |\n| togglePageFullscreen | √        | \xd7         |\n| toggleFullscreen     | √        | \xd7         |\n| togglePreview        | √        | \xd7         |\n| togglePreviewOnly    | √        | \xd7         |\n| toggleHtmlPreview    | √        | \xd7         |\n| toggleCatalog        | √        | \xd7         |\n| triggerSave          | √        | \xd7         |\n| insert               | √        | \xd7         |\n| focus                | √        | \xd7         |\n| rerender             | √        | √         |\n| getSelectedText      | √        | \xd7         |\n| resetHistory         | √        | \xd7         |\n\n### \uD83D\uDC42\uD83C\uDFFC on\n\nGet the internal state of the editor, including pageFullscreen, fullscreen, preview, htmlPreview, catalog, etc.\n\n- pageFullscreen\n\n  ```js\n  editorRef.current?.on('pageFullscreen', (status) => console.log(status));\n  ```\n\n- fullscreen\n\n  ```js\n  editorRef.current?.on('fullscreen', (status) => console.log(status));\n  ```\n\n- preview\n\n  ```js\n  editorRef.current?.on('preview', (status) => console.log(status));\n  ```\n\n- previewOnly\n\n  ```js\n  editorRef.current?.on('previewOnly', (status) => console.log(status));\n  ```\n\n- htmlPreview\n\n  ```js\n  editorRef.current?.on('htmlPreview', (status) => console.log(status));\n  ```\n\n- catalog\n\n  ```js\n  editorRef.current?.on('catalog', (status) => console.log(status));\n  ```\n\n---\n\n### \uD83D\uDCBB togglePageFullscreen\n\nToggle status of fullscreen within the page.\n\n```js\neditorRef.current?.togglePageFullscreen(true);\n```\n\n> Switched to the opposite status, without input parameter.\n\n---\n\n### \uD83D\uDDA5 toggleFullscreen\n\nToggle status of fullscreen widthin browser.\n\n```js\neditorRef.current?.toggleFullscreen(true);\n```\n\n> Switched to the opposite status, without input parameter.\n\n---\n\n### \uD83D\uDCD6 togglePreview\n\nToggle status of preview.\n\n```js\neditorRef.current?.togglePreview(true);\n```\n\n> Switched to the opposite status, without input parameter.\n\n---\n\n### \uD83D\uDCD6 togglePreviewOnly\n\nToggle into Preview Only Mode.\n\n```js\neditorRef.current?.togglePreviewOnly(true);\n```\n\n> Switched to the opposite status, without input parameter.\n\n---\n\n### \uD83D\uDCFC toggleHtmlPreview\n\nToggle status of htmlPreview.\n\n```js\neditorRef.current?.toggleHtmlPreview(true);\n```\n\n> Switched to the opposite status, without input parameter.\n\n---\n\n### \uD83E\uDDEC toggleCatalog\n\nToggle status of catalog.\n\n```js\neditorRef.current?.toggleCatalog(true);\n```\n\n> Switched to the opposite status, without input parameter.\n\n---\n\n### \uD83D\uDCBE triggerSave\n\n```js\neditorRef.current?.triggerSave();\n```\n\n---\n\n### \uD83D\uDC89 insert\n\nManually insert content into textarea.\n\n```js\n/**\n * @params selectedText\n */\neditorRef.current?.insert((selectedText) => {\n  /**\n   * @return targetValue    Content to be inserted\n   * @return select         Automatically select content, default: true\n   * @return deviationStart Start position of the selected content, default: 0\n   * @return deviationEnd   End position of the selected content, default: 0\n   */\n  return {\n    targetValue: `${selectedText}`,\n    select: true,\n    deviationStart: 0,\n    deviationEnd: 0\n  };\n});\n```\n\n---\n\n### \uD83C\uDFAF focus\n\nFocus on the textarea.\n\n```ts\nimport type { FocusOption } from 'md-editor-rt';\n\nconst option: FocusOption | undefined = 'start';\n\n// Cursor position when focusing on textarea, default: position when it last lost focus\neditorRef.current?.focus(option);\n```\n\n```ts\ntype FocusOption =\n  | 'start'\n  | 'end'\n  | {\n      // Start position, default cursor position\n      rangeAnchor?: number;\n      // End position, default cursor position\n      rangeHead?: number;\n      // Cursor position\n      cursorPos: number;\n    };\n```\n\n---\n\n### ✒️ rerender\n\nRe render the content.\n\n```js\neditorRef.current?.rerender();\n```\n\n---\n\n### \uD83D\uDD0D getSelectedText\n\nGet the currently selected text.\n\n```js\nconsole.log(editorRef.current?.getSelectedText());\n```\n\n---\n\n### \uD83D\uDDD1 resetHistory\n\nClear current history.\n\n---\n\n### \uD83C\uDF9B domEventHandlers\n\nSupports listening to all DOM events.\n\n```js\neditorRef.current?.domEventHandlers({\n  compositionstart: () => {\n    console.log('compositionstart');\n  }\n});\n```\n\n---\n\n### \uD83C\uDF9B execCommand\n\nInsert content into the editor via trigger.\n\n```js\neditorRef.current?.execCommand('bold');\n```\n\n---\n\n### \uD83D\uDD16 getEditorView\n\nGet codemirror instance.\n\n---\n\n## \uD83D\uDCB4 Config Editor\n\nUse `config(option: GlobalConfig)` to reconfigure `markdown-it` and so on.\n\n!!! warning\n\nWe recommend configuring it at the project entry point, such as in `main.js` for projects created with Vite. Avoid calling `config` within components!\n\n!!!\n\n### \uD83E\uDDAA codeMirrorExtensions\n\nCustomize new extensions based on theme and default extensions f codeMirror.\n\n```ts\ntype CodeMirrorExtensions = (\n  extensions: Array<CodeMirrorExtension>,\n  options: {\n    editorId: string;\n    theme: Themes;\n    keyBindings: Array<KeyBinding>;\n  }\n) => Array<CodeMirrorExtension>;\n```\n\n```ts\ninterface CodeMirrorExtension {\n  /**\n   * Only used to provide developers with a basis for distinguishing between different extensions.\n   */\n  type: string;\n  /**\n   * CodeMirror extensions\n   */\n  extension: Extension | ((options: any) => Extension);\n  /**\n   * A Compartment that wraps the extension\n   * Only available for certain extensions—providing the capability to update the extension.\n   */\n  compartment?: Compartment;\n  options?: any;\n}\n```\n\nExample: Editor does not render the line number of textarea by default, this extension needs to be manually added\n\n```js\nimport { config } from 'md-editor-rt';\nimport { lineNumbers } from '@codemirror/view';\n\nconfig({\n  codeMirrorExtensions(_theme, extensions) {\n    return [\n      ...extensions,\n      {\n        type: 'lineNumbers',\n        extension: lineNumbers()\n      }\n    ];\n  }\n});\n```\n\n---\n\n### \uD83C\uDF64 markdownItConfig\n\nCustomize extensions, attributes of `markdown-it`, etc.\n\n```ts\ntype MarkdownItConfig = (\n  md: markdownit,\n  options: {\n    editorId: string;\n  }\n) => void;\n```\n\nExample: Use `markdown-it-anchor` to render a hyperlink symbol to the right of the title\n\n```js\nimport { config } from 'md-editor-rt';\nimport ancher from 'markdown-it-anchor';\n\nconfig({\n  markdownItConfig(mdit) {\n    mdit.use(ancher, {\n      permalink: true\n    });\n  }\n});\n```\n\n---\n\n### \uD83C\uDF64 markdownItPlugins\n\nSelect and add built-in plugins to `markdown-it`.\n\n```ts\ntype MarkdownItPlugins = (\n  plugins: Array<MarkdownItConfigPlugin>,\n  options: {\n    editorId: string;\n  }\n) => Array<MarkdownItConfigPlugin>;\n```\n\nExample: Modify the class name of the image.\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  markdownItPlugins(plugins) {\n    return plugins.map((p) => {\n      if (p.type === 'image') {\n        return {\n          ...p,\n          options: {\n            ...p.options,\n            classes: 'my-class'\n          }\n        };\n      }\n\n      return p;\n    });\n  }\n});\n```\n\nList of built-in Plugins.\n\n| Type | Option |\n| --- | --- |\n| image | [URL](https://github.com/Antonio-Laguna/markdown-it-image-figures?tab=readme-ov-file#options) |\n| admonition | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/admonition/index.ts#L9) |\n| taskList | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/task/index.ts#L10) |\n| heading | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/heading/index.ts#L5) |\n| code | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/code/index.ts#L16) |\n| sub | none |\n| sup | none |\n| katex | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/katex/index.ts#L18) |\n| mermaid | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/mermaid/index.ts#L7) |\n\n[Source code for adding plugins](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/composition/useMarkdownIt.ts#L95)\n\n[Plugin corresponding source code](https://github.com/imzbf/md-editor-v3/tree/develop/packages/MdEditor/layouts/Content/markdownIt)\n\n---\n\n### \uD83C\uDF59 editorConfig\n\nAdd more languages, reset `mermaid` template or delay rendering time\n\n#### \uD83C\uDF5A languageUserDefined\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorConfig: {\n    languageUserDefined: {\n      'en-US': {\n        toolbarTips: {\n          bold: 'bold',\n          underline: 'underline',\n          italic: 'italic',\n          strikeThrough: 'strikeThrough',\n          title: 'title',\n          sub: 'subscript',\n          sup: 'superscript',\n          quote: 'quote',\n          unorderedList: 'unordered list',\n          orderedList: 'ordered list',\n          codeRow: 'inline code',\n          code: 'block-level code',\n          link: 'link',\n          image: 'image',\n          table: 'table',\n          mermaid: 'mermaid',\n          katex: 'formula',\n          revoke: 'revoke',\n          next: 'undo revoke',\n          save: 'save',\n          prettier: 'prettier',\n          pageFullscreen: 'fullscreen in page',\n          fullscreen: 'fullscreen',\n          preview: 'preview',\n          previewOnly: 'previewOnly',\n          htmlPreview: 'html preview',\n          catalog: 'catalog',\n          github: 'source code'\n        },\n        titleItem: {\n          h1: 'Lv1 Heading',\n          h2: 'Lv2 Heading',\n          h3: 'Lv3 Heading',\n          h4: 'Lv4 Heading',\n          h5: 'Lv5 Heading',\n          h6: 'Lv6 Heading'\n        },\n        imgTitleItem: {\n          link: 'Add Img Link',\n          upload: 'Upload Img',\n          clip2upload: 'Clip Upload'\n        },\n        linkModalTips: {\n          linkTitle: 'Add Link',\n          imageTitle: 'Add Image',\n          descLabel: 'Desc:',\n          descLabelPlaceHolder: 'Enter a description...',\n          urlLabel: 'Link:',\n          urlLabelPlaceHolder: 'Enter a link...',\n          buttonOK: 'OK'\n        },\n        clipModalTips: {\n          title: 'Crop Image',\n          buttonUpload: 'Upload'\n        },\n        copyCode: {\n          text: 'Copy',\n          successTips: 'Copied!',\n          failTips: 'Copy failed!'\n        },\n        mermaid: {\n          flow: 'flow',\n          sequence: 'sequence',\n          gantt: 'gantt',\n          class: 'class',\n          state: 'state',\n          pie: 'pie',\n          relationship: 'relationship',\n          journey: 'journey'\n        },\n        katex: {\n          inline: 'inline',\n          block: 'block'\n        },\n        footer: {\n          markdownTotal: 'Word Count',\n          scrollAuto: 'Scroll Auto'\n        }\n      }\n    }\n  }\n});\n```\n\n#### \uD83C\uDF58 mermaidTemplate\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorConfig: {\n    // mermaid template\n    mermaidTemplate: {\n      flow: `flow tempalte`,\n      sequence: `sequence template`,\n      gantt: `gantt template`,\n      class: `class template`,\n      state: `state template`,\n      pie: `pie template`,\n      relationship: `relationship template`,\n      journey: `journey template`\n    }\n  }\n});\n```\n\n#### \uD83C\uDF65 renderDelay\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorConfig: {\n    // delay rendering time(ms)\n    renderDelay: 0\n  }\n});\n```\n\n---\n\n#### \uD83C\uDF65 zIndex\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorConfig: {\n    // for modal component\n    zIndex: 2000\n  }\n});\n```\n\n---\n\n### \uD83E\uDD60 editorExtensions\n\nConfig some dependency libraries, like highlight..\n\n```typescript\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorExtensions: { highlight: { js: 'https://xxx.cc' } }\n});\n```\n\n```ts\nexport interface EditorExtensions {\n  highlight?: {\n    instance?: any;\n    js?: string;\n    css?: {\n      [key: string]: {\n        light: string;\n        dark: string;\n      };\n    };\n  };\n  prettier?: {\n    // >= 2.2.0\n    prettierInstance?: any;\n    parserMarkdownInstance?: any;\n\n    standaloneJs?: string;\n    parserMarkdownJs?: string;\n  };\n  cropper?: {\n    instance?: any;\n    js?: string;\n    css?: string;\n  };\n  screenfull?: {\n    instance?: any;\n    js?: string;\n  };\n  mermaid?: {\n    instance?: any;\n    js?: string;\n    // >=5.4.0, Whether to allow zooming to view mermaid modules\n    enableZoom?: boolean;\n  };\n  katex?: {\n    instance?: any;\n    js?: string;\n    css?: string;\n  };\n}\n```\n\n---\n\n### \uD83E\uDD60 editorExtensionsAttrs\n\nSynchronously add attributes to the CDN link tags, consistent with the type of `editorExtensions`, with a value type of `HTMLElementTagNameMap['tagName']`.\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorExtensionsAttrs: {\n    highlight: {\n      js: {\n        className: 'hglh-js'\n      },\n      css: {\n        atom: {\n          light: {\n            className: 'atom-light-css'\n          },\n          dark: {\n            className: 'atom-dark-css'\n          }\n        }\n      }\n    }\n  }\n});\n```\n\nExample of using built-in basic configuration:\n\n```js\nimport { config, editorExtensionsAttrs } from 'md-editor-rt';\n\nconfig({\n  editorExtensionsAttrs\n});\n```\n\n!!! warning Warning\n\nDo not attempt to define the src \\ onload \\ id of the script and rel \\ href \\ id of the link in editorExtensionsAttrs, as they will be overwritten by default values\n\n!!!\n\n---\n\n### \uD83C\uDFA8 mermaidConfig\n\nConfigure `mermaid`, [Details](https://mermaid.js.org/config/schema-docs/config.html)\n\n```js\nimport { config } from 'md-editor-rt';\nconfig({\n  mermaidConfig(base: any) {\n    return {\n      ...base,\n      logLevel: 'error',\n    };\n  },\n});\n```\n\n---\n\n### \uD83D\uDD27 katexConfig\n\nConfigure `katex`, [Details](https://katex.org/docs/options)\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  katexConfig(base: any) {\n    return {\n      ...base,\n      strict: false,\n    };\n  },\n});\n```\n\n---\n\n## \uD83E\uDEA1 Shortcut Keys\n\n!!! warning Pay attention\n\nShortcut keys are only available when the textarea has received focus!\n\n!!!\n\n| key | function | description |\n| --- | --- | --- |\n| TAB | insert space | Insert space, the length eq `tabWidth`, default: 2, support multiline |\n| SHIFT + TAB | delete space, setting is the same as Tab |  |\n| CTRL + C | copy | When selected, copy the selected content. When not selected, copy the content of the current line |\n| CTRL + X | shear | When selected, cut the selected content. When not selected, cut the current line |\n| CTRL + D | delete | When selected, delete the selected content. When not selected, delete the current line |\n| CTRL + S | save | Trigger `onSave` event |\n| CTRL + B | bold text | `**bold**` |\n| CTRL + U | underline | `<u>underline</u>` |\n| CTRL + I | italic | `*italic*` |\n| CTRL + 1-6 | h1-h6 | `# title` |\n| CTRL + ↑ | superscript | `<sup>superscript</sup>` |\n| CTRL + ↓ | subscript | `<sub>subscript</sub>` |\n| CTRL + O | ordered list | `1. ordered list` |\n| CTRL + L | link | `[link](https://github.com/imzbf/md-editor-rt)` |\n| CTRL + Z | withdraw | Withdraw history in editor, not the function of system |\n| CTRL + F | find and replace |  |\n| CTRL + SHIFT + S | line-through | `~line-through~` |\n| CTRL + SHIFT + U | unordered list | `- unordered list` |\n| CTRL + SHIFT + C | code block |  |\n| CTRL + SHIFT + I | picture | `![picture](https://github.com/imzbf)` |\n| CTRL + SHIFT + Z | forward | Forward history in editor, not the function of system |\n| CTRL + SHIFT + F | Beautify |  |\n| CTRL + ALT + C | code row |  |\n| CTRL + SHIFT + ALT + T | table | `\\|table\\|` |\n\n## \uD83E\uDEA4 Internal components\n\nOn-demand import, eg: `import { DropdownToolbar } from 'md-editor-rt'`.\n\n!!! info Built-in attribute\n\nTo help developers quickly insert content and use editor attributes, the editor component has already added the following property values to the extension components in the header toolbar and footer toolbar by default(If you provide it as well, your content will be given priority), More detailed reference examples: [ExportPDF](https://github.com/imzbf/md-editor-extension/blob/main/packages/rt/components/ExportPDF/ExportPDF.tsx#L71)\n\n| Name         | defToolbars | defFooters |\n| ------------ | ----------- | ---------- |\n| insert       | √           | \xd7          |\n| theme        | √           | √          |\n| previewtheme | √           | \xd7          |\n| codeTheme    | √           | \xd7          |\n| language     | √           | √          |\n| disabled     | √           | √          |\n\nExample:\n\n```jsx\nconst HeaderTool = (props) => {\n  console.log('==', props);\n  // == { insert: (...)=> {...}, theme: 'light', ... }\n\n  return <NormalToolbar>Content</NormalToolbar>;\n};\n\nconst toolbars = [0];\nconst defToolbars = [<HeaderTool key=\"key\" />];\n\nconst MyEditor1 = () => {\n  return <MdEditor toolbars={toolbars} defToolbars={defToolbars} />;\n};\n\n// ===================================\n\nconst FooterTool = (props) => {\n  console.log('==', props);\n  // == { theme: 'light', disabled: false, language: 'zh-CN' }\n\n  return <NormalFooterToolbar>Content</NormalFooterToolbar>;\n};\n\nconst footers = [0];\nconst defFooters = [<FooterTool key=\"key\" />];\n\nconst MyEditor2 = () => {\n  return <MdEditor footers={footers} defFooters={defFooters} />;\n};\n```\n\n!!!\n\n### \uD83D\uDC23 NormalToolbar\n\n- **props**\n  - **title**: `string`, optional, title of toolbar.\n  - **children**: `ReactNode`, optional, it is usually an icon, which is displayed on the toolbar.\n  - ~~**trigger**~~: `ReactNode`, optional, deprecated, as above.\n\n- **events**\n  - **onClick**: `(e: MouseEvent) => void`, required.\n\nusage:\n\n```jsx\nimport { useCallback, useState } from 'react';\nimport { MdEditor, NormalToolbar } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\n/**\n * `insert` will be automatically injected into the component by the editor\n */\nconst MyToolbar = ({ insert = () => {} }) => {\n  const onClick = useCallback(() => {\n    insert((selectedText) => {\n      /**\n       * targetValue    Content to be inserted\n       * select         Automatically select content, default: true\n       * deviationStart Start position of the selected content, default: 0\n       * deviationEnd   End position of the selected content, default: 0\n       */\n      return {\n        targetValue: `==${selectedText}==`,\n        select: true,\n        deviationStart: 0,\n        deviationEnd: 0\n      };\n    });\n  }, [insert]);\n\n  return (\n    <NormalToolbar title=\"mark\" onClick={onClick} key=\"mark-toolbar\">\n      <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n        <use xlinkHref=\"#icon-mark\"></use>\n      </svg>\n    </NormalToolbar>\n  );\n};\n\nconst toolbars = ['bold', 0, '=', 'github'];\nconst defToolbars = [<MyToolbar />];\n\nexport default () => {\n  const [value, setValue] = useState('');\n\n  return <MdEditor modelValue={value} id=\"md-prev\" toolbars={toolbars} defToolbars={defToolbars} onChange={setValue} />;\n};\n```\n\n[MarkExtension Source Code](https://github.com/imzbf/md-editor-extension/blob/develop/packages/rt/components/Mark/Mark.tsx)\n\n---\n\n### \uD83D\uDC3C DropdownToolbar\n\n- **props**\n  - **title**: `string`, optional, title of toolbar.\n  - **visible**: `boolean`, required.\n  - **children**: `ReactNode`, optional, it is usually an icon, which is displayed on the toolbar.\n  - ~~**trigger**~~: `ReactNode`, optional, deprecated, as above.\n  - **overlay**: `ReactNode`, required, content of dropdown box.\n\n- **events**\n  - **onChange**: `(visible: boolean) => void`, required.\n\nusage:\n\n```jsx\nimport { useCallback, useState } from 'react';\nimport { MdEditor, DropdownToolbar } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\n/**\n * `insert` will be automatically injected into the component by the editor\n */\nconst MyToolbar = ({ insert = () => {} }) => {\n  const [visible, setVisible] = useState(false);\n\n  const onClick = useCallback(() => {\n    insert((selectedText) => {\n      /**\n       * targetValue    Content to be inserted\n       * select         Automatically select content, default: true\n       * deviationStart Start position of the selected content, default: 0\n       * deviationEnd   End position of the selected content, default: 0\n       */\n      return {\n        targetValue: `==${selectedText}==`,\n        select: true,\n        deviationStart: 0,\n        deviationEnd: 0\n      };\n    });\n  }, [insert]);\n\n  return (\n    <DropdownToolbar\n      visible={visible}\n      onChange={setVisible}\n      overlay={\n        <ul>\n          <li onClick={onClick}>option 1</li>\n          <li>option 2</li>\n        </ul>\n      }\n      key=\"emoji-toolbar\"\n    >\n      <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n        <use xlinkHref=\"#icon-emoji\"></use>\n      </svg>\n    </DropdownToolbar>\n  );\n};\n\nconst toolbars = ['bold', 0, '=', 'github'];\nconst defToolbars = [<MyToolbar key=\"key\" />];\n\nexport default () => {\n  const [value, setValue] = useState('');\n\n  return <MdEditor modelValue={value} id=\"md-prev\" toolbars={toolbars} defToolbars={defToolbars} onChange={setValue} />;\n};\n```\n\n[EmojiExtension Source Code](https://github.com/imzbf/md-editor-extension/blob/develop/packages/rt/components/Emoji/Emoji.tsx)\n\n---\n\n### \uD83E\uDD89 ModalToolbar\n\n- **props**\n  - **title**: `string`, optional, title of toolbar.\n  - **modalTitle**: `ReactNode`, optional, title of the Modal.\n  - **visible**: `boolean`, required, visibility of Modal.\n  - **width**: `string`, optional, width of Modal, default `auto`.\n  - **height**: `string`, same as `width`.\n  - **showAdjust**: `boolean`, optional, visibility of fullscreen button.\n  - **isFullscreen**: `boolean`, required when `showAdjust = true`, status of fullscreen.\n  - **trigger**: `ReactNode`, required, it is usually an icon, which is displayed on the toolbar.\n  - **children**: `ReactNode`, required, content of Modal.\n  - **className**: `string`, `^4.16.8`, optional.\n  - **style**: `CSSProperties`, `^4.16.8`, optional.\n  - **showMask**: `boolean`, `^4.16.8`, optional, whether to display the mask layer, default `true`.\n\n- **events**\n  - **onClick**: `() => void`, required.\n  - **onClose**: `() => void`, required, close event.\n  - **onAdjust**: `(val: boolean) => void`, fullscreen button click event.\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor, ModalToolbar } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\n/**\n * `insert` will be automatically injected into the component by the editor\n */\nconst MyToolbar = ({ insert = () => {} }) => {\n  const [visible, setVisible] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  const onClick = useCallback(() => {\n    setVisible(true);\n  }, []);\n\n  const onClose = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const onAdjust = useCallback(() => {\n    setIsFullscreen((i) => !i);\n  }, []);\n\n  const insertHandler = useCallback(() => {\n    insert((selectedText) => {\n      /**\n       * targetValue    Content to be inserted\n       * select         Automatically select content, default: true\n       * deviationStart Start position of the selected content, default: 0\n       * deviationEnd   End position of the selected content, default: 0\n       */\n      return {\n        targetValue: `==${selectedText}==`,\n        select: true,\n        deviationStart: 0,\n        deviationEnd: 0\n      };\n    });\n  }, [insert]);\n\n  return (\n    <ModalToolbar\n      visible={visible}\n      isFullscreen={isFullscreen}\n      showAdjust\n      title=\"hover-title\"\n      modalTitle=\"modalTitle\"\n      width=\"870px\"\n      height=\"600px\"\n      onClick={onClick}\n      onClose={onClose}\n      onAdjust={onAdjust}\n      trigger={\n        <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n          <use xlinkHref=\"#icon-read\"></use>\n        </svg>\n      }\n    >\n      <div\n        style={{\n          height: '100%',\n          padding: '20px',\n          overflow: 'auto'\n        }}\n      >\n        <button onClick={insertHandler}>click me</button>\n      </div>\n    </ModalToolbar>\n  );\n};\n\nconst toolbars = ['bold', 0, '=', 'github'];\nconst defToolbars = [<MyToolbar key=\"key\" />];\n\nexport default () => {\n  const [value, setValue] = useState('');\n  return <MdEditor modelValue={value} id=\"md-prev\" toolbars={toolbars} defToolbars={defToolbars} onChange={setValue} />;\n};\n```\n\n[ExportPDF Source Code](https://github.com/imzbf/md-editor-extension/blob/develop/packages/rt/components/ExportPDF/ExportPDF.tsx)\n\n---\n\n### \uD83D\uDC3B MdCatalog\n\n- **props**\n  - **editorId**: `string`, required, editor's `id`, used to register listening events.\n  - **className**: `string`, optional.\n  - **mdHeadingId**: `mdHeadingId`, optional, same as editor.\n  - **scrollElement**: `string | HTMLElement`, optional, it is an element selector when its type is string. When using `MdPreview`, it is usually set to `document.documentElement`. ⚠️ This element must be positioned (e.g., relative, absolute, or fixed) and have scrollable content.\n  - **theme**: 'light' | 'dark', optional, provide it when you want to change theme online, it is the same as Editor `theme`.\n  - **offsetTop**: `number`, optional, highlight current item of catalogs when title is `offsetTop` pixels from the top, default 20.\n  - **scrollElementOffsetTop**: `number`, optional, offsetTop of the scroll container, default 0.\n  - **catalogMaxDepth**: `number`, `^5.5.0`, optional, controls the maximum depth of the catalog to be displayed.\n\n- **events**\n  - **onClick**: `(e: MouseEvent, t: TocItem) => void`, optional.\n  - **onActive**: `(heading: HeadList | undefined) => void`, optional, heading was highlighted.\n\nusage:\n\n```jsx\nimport { MdPreview, MdCatalog } from 'md-editor-rt';\nimport 'md-editor-rt/lib/preview.css';\n\nconst editorId = 'my-editor';\n\nexport default () => {\n  const [state] = useState({\n    text: '# heading',\n    scrollElement: document.documentElement\n  });\n\n  return (\n    <>\n      {/* Ensure that the editorId is the same */}\n      <MdPreview id={editorId} modelValue={state.text} />\n      <MdCatalog editorId={editorId} scrollElement={state.scrollElement} />\n    </>\n  );\n};\n```\n\n---\n\n### \uD83D\uDEF8 MdModal\n\nIt is usually used in conjunction with `DropdownToolbar`.\n\n- **props**\n  - **title**: `ReactNode`, optional, title of Modal.\n  - **visible**: `boolean`, required, visibility of Modal.\n  - **width**: `string`, optional, width of Modal, default `auto`.\n  - **height**: `string`, same as `width`.\n  - **showAdjust**: `boolean`, optional, visibility of fullscreen button.\n  - **isFullscreen**: `boolean`, required when `showAdjust = true`, status of fullscreen.\n  - **children**: `ReactNode`, required, content of Modal.\n  - **className**: `string`, optional.\n  - **style**: `CSSProperties`, optional.\n  - **showMask**: `boolean`, `^4.16.8`, optional, whether to display the mask layer, default `true`.\n\n- **events**\n  - **onClose**: `() => void`, required, close event.\n  - **onAdjust**: `(val: boolean) => void`, fullscreen button click event.\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor, DropdownToolbar, MdModal } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\n/**\n * `insert` will be automatically injected into the component by the editor\n */\nconst MyToolbar = () => {\n  const [visible, setVisible] = useState(false);\n  const [mVisible, setMvisible] = useState(false);\n\n  const onClick = useCallback(() => {\n    setMvisible(true);\n  }, []);\n\n  const onClose = useCallback(() => {\n    setMvisible(false);\n  }, []);\n\n  return (\n    <>\n      <DropdownToolbar\n        visible={visible}\n        onChange={setVisible}\n        overlay={\n          <ul>\n            <li onClick={onClick}>option 1</li>\n            <li>option 2</li>\n          </ul>\n        }\n        key=\"emoji-toolbar\"\n      >\n        <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n          <use xlinkHref=\"#icon-emoji\"></use>\n        </svg>\n      </DropdownToolbar>\n      <MdModal title=\"title\" visible={mVisible} onClose={onClose}>\n        Content, Content\n      </MdModal>\n    </>\n  );\n};\n\nconst defToolbars = [<MyToolbar key=\"key\" />];\n\nexport default () => {\n  const [value, setValue] = useState('');\n\n  return (\n    <MdEditor\n      modelValue={value}\n      id=\"md-prev\"\n      toolbars={['bold', 0, '=', 'github']}\n      defToolbars={defToolbars}\n      onChange={setValue}\n    />\n  );\n};\n```\n\n---\n\n### \uD83D\uDEF8 NormalFooterToolbar\n\nFooter toolbar components\n\n- **events**\n  - **onClick**: `(e: MouseEvent) => void`, optional, toolbar was clicked.\n\n- **slots**\n  - **children**: `ReactNode`, required, content.\n\n```jsx\nimport { MdEditor, NormalFooterToolbar } from 'md-editor-rt';\n\nconst FooterTool = (props) => {\n  return <NormalFooterToolbar>Content</NormalFooterToolbar>;\n};\n\nconst footers = [0];\nconst defFooters = [<FooterTool key=\"key\" />];\n\nexport default () => {\n  return <MdEditor footers={footers} defFooters={defFooters} />;\n};\n```\n\n---\n\n## \uD83E\uDEA4 Internal Configuration\n\n```js\nimport { allToolbar, allFooter, zh_CN, en_US, editorExtensionsAttrs } from 'md-editor-rt';\n\nconsole.log(allToolbar, allFooter, zh_CN, en_US, editorExtensionsAttrs);\n```\n\n## \uD83D\uDCE6 Internal Tools\n\n### \uD83E\uDDF9 clearSideEffects\n\n`>=5.0.0`\n\nClear the side effects brought by the component, for example: links embedded using CDN. To ensure that multiple components can run correctly., the component will not actively remove these when it is unmounted.\n\n```js\nimport { clearSideEffects } from 'md-editor-rt';\n\nclearSideEffects();\n```\n\n!!! warning\n\nIt will remove the CDN references in the page. If the component instance still exists on the current page, do not call it!\n\n!!!\n\n### XSSPlugin\n\n`>=5.0.0`\n\nExample: [Add XSS extension](https://imzbf.github.io/md-editor-rt/en-US/demo#%F0%9F%94%92%20Add%20XSS%20extension)\n\n## ✍️ Edit This Page\n\n[doc-en-US](https://github.com/imzbf/md-editor-rt/blob/dev-docs/public/doc-en-US.md)\n\n```\n\n```\n"})]})}},8419:(n,e,t)=>{"use strict";t.d(e,{A:()=>m});var o=t(7876),r=t(8854),i=t(1120),s=t(6510),a=t(9385),l=t(1281),d=t(4232);let c=(n,e)=>{history.replaceState({},"","".concat(location.pathname,"#").concat(e.text))},u=n=>{let e=(0,s.G)(n=>n.setting),t=(0,d.useRef)(null),r=(0,d.useRef)(!0),i=(0,d.useCallback)((n,e)=>{if(!e||!r.current)return;let o=(0,a.Uw)(),i=e.offsetTop-t.current.scrollTop;i>200?o(t.current,e.offsetTop-200):i<100&&o(t.current,e.offsetTop-100)},[]);return(0,o.jsx)("div",{className:"catalog",onMouseEnter:()=>{r.current=!1},onMouseLeave:()=>{r.current=!0},children:(0,o.jsx)("div",{ref:t,className:"affix",children:(0,o.jsx)(l.M,{scrollElementOffsetTop:10,editorId:n.editorId,theme:e.theme,scrollElement:"html",onClick:c,onActive:i})})})},m=n=>{let{showCodeRowNumber:e=!0}=n,t=(0,i.u)(),a=(0,s.G)(n=>n.setting);return(0,o.jsx)("div",{className:"container",children:(0,o.jsxs)("div",{className:"doc",children:[(0,o.jsx)("div",{className:"content",children:(0,o.jsx)(r.A,{id:n.editorId,language:t,theme:a.theme,value:n.value,previewTheme:a.previewTheme,showCodeRowNumber:e,codeTheme:a.codeTheme})}),(0,o.jsx)(u,{editorId:n.editorId})]})})}}},n=>{n.O(0,[6791,636,6593,8792],()=>n(n.s=1089)),_N_E=n.O()}]);