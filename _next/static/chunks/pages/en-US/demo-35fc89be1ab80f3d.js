(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6812],{4404:(n,e,t)=>{"use strict";t.d(e,{A:()=>u});var o=t(7876),r=t(8854),i=t(409),s=t(6653),d=t(4232),a=t(2932),l=t(9385);let m=(n,e)=>{history.replaceState({},"","".concat(location.pathname,"#").concat(e.text))},c=n=>{let e=(0,i.G)(n=>n.setting),t=(0,d.useRef)(null),r=(0,d.useRef)(!0),s=(0,d.useCallback)((n,e)=>{if(!e||!r.current)return;let o=(0,l.Uw)(),i=e.offsetTop-t.current.scrollTop;i>200?o(t.current,e.offsetTop-200):i<100&&o(t.current,e.offsetTop-100)},[]);return(0,o.jsx)("div",{className:"catalog",onMouseEnter:()=>{r.current=!1},onMouseLeave:()=>{r.current=!0},children:(0,o.jsx)("div",{ref:t,className:"affix",children:(0,o.jsx)(a.M,{scrollElementOffsetTop:10,editorId:n.editorId,theme:e.theme,scrollElement:"html",onClick:m,onActive:s})})})},u=n=>{let{showCodeRowNumber:e=!0}=n,t=(0,s.u)(),d=(0,i.G)(n=>n.setting);return(0,o.jsx)("div",{className:"container",children:(0,o.jsxs)("div",{className:"doc",children:[(0,o.jsx)("div",{className:"content",children:(0,o.jsx)(r.A,{id:n.editorId,language:t,theme:d.theme,value:n.value,previewTheme:d.previewTheme,showCodeRowNumber:e,codeTheme:d.codeTheme})}),(0,o.jsx)(c,{editorId:n.editorId})]})})}},5475:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>c});var o=t(7876),r=t(7328),i=t.n(r),s=t(788),d=t(4404),a=t(2845),l=t(9891);let m=(0,a.xA)("## \uD83D\uDE01 Basic Usage\n\nIt has been developing iteratively, so update the latest version please. Publish logs: [releases](https://github.com/imzbf/md-editor-rt/releases)\n\n### \uD83E\uDD16 Npm Install\n\n```shell [install:npm]\nnpm install md-editor-rt\n```\n\n```shell [install:yarn]\nyarn add md-editor-rt\n```\n\n!!! warning\n\n~~When using server-side rendering, make sure to set `editorId` to a constant value.~~\nStarting from version 5.0, there is no such limitation.\n\n!!!\n\n### \uD83E\uDD13 CDN\n\nUse production version in html directly:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <link\n      href=\"https://unpkg.com/md-editor-rt@${EDITOR_VERSION}/lib/style.css\"\n      rel=\"stylesheet\"\n    />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"https://unpkg.com/react@18.2.0/umd/react.production.min.js\"><\/script>\n    <script src=\"https://unpkg.com/react-dom@18.2.0/umd/react-dom.production.min.js\"><\/script>\n    <script src=\"https://unpkg.com/md-editor-rt@${EDITOR_VERSION}/lib/umd/index.js\"><\/script>\n    <script>\n      ReactDOM.createRoot(document.getElementById('root')).render(\n        React.createElement(MdEditorRT.MdEditor, {\n          modelValue: 'Hello Editor!!',\n        })\n      );\n    <\/script>\n  </body>\n</html>\n```\n\n#### \uD83E\uDD13 Jsx Template\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt!');\n  return <MdEditor modelValue={text} onChange={setText} />;\n};\n```\n\n#### \uD83D\uDCD6 Preview Only\n\n```jsx\nimport { useState } from 'react';\nimport { MdPreview, MdCatalog } from 'md-editor-rt';\nimport 'md-editor-rt/lib/preview.css';\n\nexport default () => {\n  const [id] = useState('preview-only');\n  const [scrollElement] = useState(document.documentElement);\n  const [text] = useState('hello md-editor-rt!');\n\n  return (\n    <>\n      <MdPreview id={id} modelValue={text} />\n      <MdCatalog editorId={id} scrollElement={scrollElement} />\n    </>\n  );\n};\n```\n\n!!! warning\n\nWhen using server-side rendering, `scrollElement` should be of string type, eg: `html`, `body`, `#id`, `.class`.\n\n!!!\n\n## \uD83C\uDF9B Used in Web Component\n\nComplete example reference [the sample project](https://github.com/imzbf/md-editor-rt/tree/main/example/webComponent) provided in the source code.\n\nHere are the precautions:\n\n1. The image zoom-in view feature is ineffective; implementation needs to be done manually!!!\n2. Do not use CDN to reference dependency libraries by default; refer to [[Import All Library]](https://imzbf.github.io/md-editor-rt/en-US/demo#%F0%9F%99%8D%F0%9F%8F%BB%E2%80%8D%E2%99%82%EF%B8%8F%20Import%20All%20Library)!!!\n\n## \uD83E\uDD42 Api usage\n\nUsages of some APIs.\n\n### \uD83E\uDD76 Customize Shortcut Key\n\n- Source code for built-in shortcut key configuration: [commands.ts](https://github.com/imzbf/md-editor-rt/blob/develop/packages/MdEditor/layouts/Content/codemirror/commands.ts). They have been added as extensions to `codemirror`.\n\n- The basic principle of replacing or deleting shortcut keys is to find the corresponding extension, and handle it.\n\n- In fact, The Second input parameter `extensions` of `codeMirrorExtensions` is an array, The first item in the array is the shortcut key extension. The third input parameter is the default shortcut key configuration.\n\n#### \uD83D\uDC85 Modify Shortcut Key\n\nChange `Ctrl-b` to `Ctrl-m`\n\n```js\nimport { config } from 'md-editor-rt';\nimport { keymap } from '@codemirror/view';\n\nconfig({\n  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]\n  codeMirrorExtensions(theme, extensions, mdEditorCommands) {\n    const newExtensions = [...extensions];\n    // 1. Remove the default shortcut key extension first\n    newExtensions.shift();\n\n    // 2. Reference the source code for shortcut key configuration\n    // Find the location of the configuration item for CtrlB in mdEditorCommands\n    const CtrlB = mdEditorCommands[0];\n\n    // 3. Document for configuring shortcut keys of codemirror\n    // https://codemirror.net/docs/ref/#commands\n    const CtrlM = {\n      // We need the run method in CtrlB here\n      ...CtrlB,\n      key: 'Ctrl-m',\n      mac: 'Cmd-m',\n    };\n\n    // 4. Add the modified shortcut key to the array\n    const newMdEditorCommands = [\n      CtrlM,\n      ...mdEditorCommands.filter((i) => i.key !== 'Ctrl-b'),\n    ];\n\n    newExtensions.push(keymap.of(newMdEditorCommands));\n\n    return newExtensions;\n  },\n});\n```\n\n#### ✂️ Delete Shortcut Key\n\nDisable all shortcut keys\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]\n  codeMirrorExtensions(theme, extensions) {\n    const newExtensions = [...extensions];\n    // 1. Remove default shortcut key extensions\n    newExtensions.shift();\n\n    // 2. Return extension list\n    return newExtensions;\n  },\n});\n```\n\n#### \uD83D\uDC89 Add Shortcut Key\n\nIf you want to insert content into the edit box, you need to use the `insert` method bound on the instance of editor, reference: [Insert content into the edit box](/md-editor-rt/ed-US/docs#%F0%9F%92%89%20insert).\n\nIf you are not using `config` in the component where the editor is located, you are unable to obtain instance of editor at this time. You may need to use `EventBus`.\n\nAdd shortcut key `Ctrl+m`, to insert a marking module into the editing box(`==mark==`)\n\n`index.ts`\n\n```js\nimport { config } from 'md-editor-rt';\nimport { keymap, KeyBinding } from '@codemirror/view';\n// If you used EventBus\nimport bus from '@/utils/event-bus';\n\nconfig({\n  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]\n  codeMirrorExtensions(theme, extensions, mdEditorCommands) {\n    const newExtensions = [...extensions];\n    // 1. Remove the default shortcut key extension first\n    newExtensions.shift();\n\n    // 2. Create a new shortcut key configuration, reference: https://codemirror.net/docs/ref/#commands\n    const CtrlM: KeyBinding = {\n      key: 'Ctrl-m',\n      mac: 'Cmd-m',\n      run: () => {\n        bus.emit('insertMarkBlock');\n        return true;\n      },\n    };\n\n    // 4. Add a new shortcut key to the array\n    const newMdEditorCommands = [...mdEditorCommands, CtrlM];\n\n    newExtensions.push(keymap.of(newMdEditorCommands));\n\n    return newExtensions;\n  },\n});\n```\n\nNext, listening 'insertMarkBlock' in the component where the editor is located\n\n`App.tsx`\n\n```tsx\nimport { useState, useRef, useEffect } from 'react';\nimport { MdEditor, ExposeParam } from 'md-editor-rt';\n// If you used EventBus\nimport bus from '@/utils/event-bus';\n\nconst App = () => {\n  const [text] = useState('## md-editor-rt\\n\\n');\n  const mdEditorRef = useRef<ExposeParam>();\n\n  useEffect(() => {\n    bus.on('insertMarkBlock', () => {\n      mdEditorRef.current?.insert((selectedText) => {\n        return {\n          targetValue: `==${selectedText}==`,\n          select: true,\n          deviationStart: 2,\n          deviationEnd: -2,\n        };\n      });\n    });\n  }, []);\n\n  return <MdEditor modelValue={text} ref={mdEditorRef} />;\n};\n```\n\nAttach: Simple version of `EventBus`\n\n```ts\n/* eslint-disable @typescript-eslint/ban-types */\nclass EventBus {\n  private events: Map<string, Function[]>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  on(eventName: string, fn: Function) {\n    if (!eventName) {\n      console.error('Get a wrong eventName');\n      return false;\n    }\n\n    if (!(fn instanceof Function)) {\n      console.error('Get a wrong callback');\n      return false;\n    }\n\n    const fns = this.events.get(eventName) || [];\n    fns.push(fn);\n    this.events.set(eventName, fns);\n  }\n\n  emit(eventName: string, ...args: any[]) {\n    this.events.get(eventName)?.forEach((fn) => {\n      fn(args);\n    });\n  }\n}\n\nexport default new EventBus();\n```\n\n### \uD83C\uDF66 Change Theme\n\nThemes are divided into editor theme(`theme`), article preview theme(`previewTheme`) and code theme(`codeTheme`).\n\n#### \uD83C\uDF67 Editor Theme\n\nSupport `light` and `dark` default.\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt!');\n  const [theme] = useState('dark');\n  return <MdEditor modelValue={text} onChange={setText} theme={theme} />;\n};\n```\n\n#### \uD83C\uDF61 Preview Theme\n\nThere are 6 kinds of themes: `default`, `github`, `vuepress`, `mk-cute`, `smart-blue` and `cyanosis`. It is useful When you want to show your article directly. Modify `previewTheme`.\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt!');\n  const [previewTheme] = useState('github');\n  return (\n    <MdEditor\n      modelValue={text}\n      onChange={setText}\n      previewTheme={previewTheme}\n    />\n  );\n};\n```\n\n- Custom\n\n  1. Write `css` under the `xxx-theme` claa. `xxx` is the name of your theme, for more examples, refer to [markdown-theme](https://github.com/imzbf/markdown-theme).\n\n  _xxx.css_\n\n  ```css\n  .xxx-theme code {\n    color: red;\n  }\n  ```\n\n  2. Import\n\n  ```js\n  import 'xxx.css';\n  ```\n\n  3. Set `previewTheme`\n\n  ```jsx\n  <MdEditor previewTheme=\"xxx\" />\n  ```\n\n#### \uD83C\uDF84 Code Theme\n\nThere are 8 kinds of themes: `atom`, `a11y`, `github`, `gradient`, `kimbie`, `paraiso`,`qtcreator` and `stackoverflow`, they are all from [highlight.js](https://highlightjs.org/).\n\n- Usage\n\n  ```jsx\n  import { useState } from 'react';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  export default () => {\n    const [text, setText] = useState('hello md-editor-rt!');\n    const [codeTheme] = useState('atom');\n    return (\n      <MdEditor modelValue={text} onChange={setText} codeTheme={codeTheme} />\n    );\n  };\n  ```\n\n- Custom\n\n  1. Find or Write your favorite theme, then config them:\n\n  ```js\n  import { config } from 'md-editor-rt';\n\n  config({\n    editorExtensions: {\n      highlight: {\n        css: {\n          xxxxx: {\n            light:\n              'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-light.css',\n            dark: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-dark.css',\n          },\n          yyyyy: {\n            light:\n              'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-light.css',\n            dark: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-dark.css',\n          },\n        },\n      },\n    },\n  });\n  ```\n\n  If some keys in object `css` are same as Editor's, Editor's whill be replaced.\n\n  2. Set `codeTheme`\n\n  ```jsx\n  <MdEditor codeTheme=\"xxxxx\" />\n  ```\n\n### \uD83D\uDEE0 Config Extensions\n\nExtensions highlight, prettier, cropper, screenfull are import from `cdn`. When your project is running offline, replace urls of these extensions. Some Extensions support be injected in development environment.\n\nExample for `screenfull`:\n\n#### ⚰️ Inject Directly\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor, config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\nimport screenfull from 'screenfull';\n\nconfig({\n  editorExtensions: {\n    screenfull: {\n      instance: screenfull,\n    },\n  },\n});\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt!');\n  return <MdEditor modelValue={text} onChange={setText} />;\n};\n```\n\n#### \uD83D\uDCE1 Intranet Link\n\nGet files from [unpkg.com](https://unpkg.com).\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor, config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nconfig({\n  editorExtensions: {\n    screenfull: {\n      js: 'https://localhost:8090/screenfull@5.2.0/index.js',\n    },\n  },\n});\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt!');\n  return <MdEditor modelValue={text} onChange={setText} />;\n};\n```\n\n### \uD83D\uDCF7 Upload Pictures\n\nBy default, you can select multiple pictures. You can paste and upload screenshots and copy web page pictures.\n\n> Tips: When pasting pictures, if they are GIF graphs, it does not work! Please upload it by file system.\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nconst onUploadImg = async (files, callback) => {\n  const res = await Promise.all(\n    files.map((file) => {\n      return new Promise((rev, rej) => {\n        const form = new FormData();\n        form.append('file', file);\n\n        axios\n          .post('/api/img/upload', form, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          })\n          .then((res) => rev(res))\n          .catch((error) => rej(error));\n      });\n    })\n  );\n\n  callback(res.map((item) => item.data.url));\n};\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt!');\n  return (\n    <MdEditor modelValue={text} onChange={setText} onUploadImg={onUploadImg} />\n  );\n};\n```\n\n### \uD83C\uDFF3️‍\uD83C\uDF08 Extension Language\n\n```js\nimport { useState } from 'react';\nimport { MdEditor, config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nconfig({\n  editorConfig: {\n    languageUserDefined: {\n      'my-lang': {\n        toolbarTips: {\n          bold: 'bold',\n          underline: 'underline',\n          italic: 'italic',\n          strikeThrough: 'strikeThrough',\n          title: 'title',\n          sub: 'subscript',\n          sup: 'superscript',\n          quote: 'quote',\n          unorderedList: 'unordered list',\n          orderedList: 'ordered list',\n          task: 'task list',\n          codeRow: 'inline code',\n          code: 'block-level code',\n          link: 'link',\n          image: 'image',\n          table: 'table',\n          mermaid: 'mermaid',\n          katex: 'formula',\n          revoke: 'revoke',\n          next: 'undo revoke',\n          save: 'save',\n          prettier: 'prettier',\n          pageFullscreen: 'fullscreen in page',\n          fullscreen: 'fullscreen',\n          preview: 'preview',\n          htmlPreview: 'html preview',\n          catalog: 'catalog',\n          github: 'source code',\n        },\n        titleItem: {\n          h1: 'Lv1 Heading',\n          h2: 'Lv2 Heading',\n          h3: 'Lv3 Heading',\n          h4: 'Lv4 Heading',\n          h5: 'Lv5 Heading',\n          h6: 'Lv6 Heading',\n        },\n        imgTitleItem: {\n          link: 'Add Img Link',\n          upload: 'Upload Img',\n          clip2upload: 'Clip Upload',\n        },\n        linkModalTips: {\n          linkTitle: 'Add Link',\n          imageTitle: 'Add Image',\n          descLabel: 'Desc:',\n          descLabelPlaceHolder: 'Enter a description...',\n          urlLabel: 'Link:',\n          urlLabelPlaceHolder: 'Enter a link...',\n          buttonOK: 'OK',\n        },\n        clipModalTips: {\n          title: 'Crop Image',\n          buttonUpload: 'Upload',\n        },\n        copyCode: {\n          text: 'Copy',\n          successTips: 'Copied!',\n          failTips: 'Copy failed!',\n        },\n        mermaid: {\n          flow: 'flow',\n          sequence: 'sequence',\n          gantt: 'gantt',\n          class: 'class',\n          state: 'state',\n          pie: 'pie',\n          relationship: 'relationship',\n          journey: 'journey',\n        },\n        katex: {\n          inline: 'inline',\n          block: 'block',\n        },\n        footer: {\n          markdownTotal: 'Word Count',\n          scrollAuto: 'Scroll Auto',\n        },\n      },\n    },\n  },\n});\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt!');\n  const [language] = useState('my-lang');\n\n  return <MdEditor modelValue={text} onChange={setText} language={language} />;\n};\n```\n\nYou can install the existing language also: [md-editor-extension](https://github.com/imzbf/md-editor-extension). Refer to extension library for the usage and the way to contribute~\n\n### \uD83D\uDCC4 Get Catalogue\n\n- Get\n\n  ```jsx\n  import { useState } from 'react';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  export default () => {\n    const [text, setText] = useState('hello md-editor-rt!');\n    const [catalogList, setList] = useState([]);\n\n    return (\n      <MdEditor modelValue={text} onChange={setText} onGetCatalog={setList} />\n    );\n  };\n  ```\n\n- Display\n\n  Use `MdCatalog`\n\n  ```jsx\n  import { useState } from 'react';\n  import { MdPreview, MdCatalog } from 'md-editor-rt';\n  import 'md-editor-rt/lib/preview.css';\n\n  const editorId = 'my-editor';\n\n  export default () => {\n    const [state] = useState({\n      text: '# heading',\n      scrollElement: document.documentElement,\n    });\n\n    return (\n      <>\n        <MdPreview modelValue={state.text} id={editorId} />\n        <MdCatalog editorId={editorId} scrollElement={state.scrollElement} />\n      </>\n    );\n  };\n  ```\n\n### \uD83E\uDE9A Define Toolbar\n\n> after v1.2.0, You can sort the toolbar as you like, split tools by `'-'`, the left and right toolbars are divided by `'='`!\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt!');\n  const [toolbars] = useState([\n    'italic',\n    'underline',\n    '-',\n    'bold',\n    '=',\n    'github',\n  ]);\n\n  return <MdEditor modelValue={text} onChange={setText} toolbars={toolbars} />;\n};\n```\n\n### \uD83D\uDCAA Customize Toolbar\n\nThere are examples of `mark` and `emoji`.\n\nTo get complete code, refer to [docs](https://github.com/imzbf/md-editor-rt/blob/docs/src/pages/Preview/index.tsx).\n\n![mark and Emoji extension](https://imzbf.github.io/md-editor-rt/imgs/mark_emoji.gif)\n\n> Get more emojis, go to [https://getemoji.com/](https://getemoji.com/).\n\n### \uD83E\uDDD9‍♂️ Change Styles\n\n```less\n.css-vars(@isDark) {\n  --md-color: if(@isDark, #999, #222);\n  --md-hover-color: if(@isDark, #bbb, #000);\n  --md-bk-color: if(@isDark, #000, #fff);\n  --md-bk-color-outstand: if(@isDark, #333, #f2f2f2);\n  --md-bk-hover-color: if(@isDark, #1b1a1a, #f5f7fa);\n  --md-border-color: if(@isDark, #2d2d2d, #e6e6e6);\n  --md-border-hover-color: if(@isDark, #636262, #b9b9b9);\n  --md-border-active-color: if(@isDark, #777, #999);\n  --md-modal-mask: #00000073;\n  --md-scrollbar-bg-color: if(@isDark, #0f0f0f, #e2e2e2);\n  --md-scrollbar-thumb-color: if(@isDark, #2d2d2d, #0000004d);\n  --md-scrollbar-thumb-hover-color: if(@isDark, #3a3a3a, #00000059);\n  --md-scrollbar-thumb-active-color: if(@isDark, #3a3a3a, #00000061);\n}\n\n.md-editor {\n  .css-vars(false);\n}\n\n.md-editor-dark {\n  .css-vars(true);\n}\n```\n\nChange background color in dark mode:\n\n```css\n.md-editor-dark {\n  --md-bk-color: #333 !important;\n}\n```\n\n### \uD83D\uDE4D\uD83C\uDFFB‍♂️ Import All Library\n\n1. Install Dependencies\n\n```shell\nyarn add screenfull katex cropperjs@1 mermaid highlight.js prettier\n```\n\n!!! info\nCurrently `cropperjs@2` is being optimised, and there are no plans to switch to version 2.0.\n!!!\n\n2. Configure\n\n!!! warning\n\nWe recommend configuring it at the project entry point, such as in `main.js` for projects created with Vite. Avoid calling `config` within components!\n\n!!!\n\nmain.js\n\n```js\nimport { config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nimport screenfull from 'screenfull';\n\nimport katex from 'katex';\nimport 'katex/dist/katex.min.css';\n\nimport Cropper from 'cropperjs';\nimport 'cropperjs/dist/cropper.css';\n\nimport mermaid from 'mermaid';\n\nimport highlight from 'highlight.js';\nimport 'highlight.js/styles/atom-one-dark.css';\n\n// <3.0\nimport prettier from 'prettier';\nimport parserMarkdown from 'prettier/parser-markdown';\n// >=3.0\nimport * as prettier from 'prettier';\nimport parserMarkdown from 'prettier/plugins/markdown';\n\nconfig({\n  editorExtensions: {\n    prettier: {\n      prettierInstance: prettier,\n      parserMarkdownInstance: parserMarkdown,\n    },\n    highlight: {\n      instance: highlight,\n    },\n    screenfull: {\n      instance: screenfull,\n    },\n    katex: {\n      instance: katex,\n    },\n    cropper: {\n      instance: Cropper,\n    },\n    mermaid: {\n      instance: mermaid,\n    },\n  },\n});\n```\n\n```jsx\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  return <MdEditor modelValue=\"\" />;\n};\n```\n\n> Tips: While import highlight styles by yourself, editor will not be able to change code styles.\n\n### \uD83D\uDD12 Compile-time Prevention of XSS\n\nVersion 5.0 exports the built-in XSS plugin, which is no longer added by default. The exported XSS plugin includes additional tags and attributes on top of the default whitelist:\n\n```json::close\n{\n  \"img\": [\"class\"],\n  // Task List\n  \"input\": [\"class\", \"disabled\", \"type\", \"checked\"],\n  // Embedded video codes such as YouTube, WeTV, and Bilibili\n  \"iframe\": [\n    \"class\",\n    \"width\",\n    \"height\",\n    \"src\",\n    \"title\",\n    \"border\",\n    \"frameborder\",\n    \"framespacing\",\n    \"allow\",\n    \"allowfullscreen\"\n  ]\n}\n```\n\n#### \uD83D\uDD12 Add XSS extension\n\n```js\nimport { config, XSSPlugin } from 'md-editor-rt';\n\nconfig({\n  markdownItPlugins(plugins) {\n    return [\n      ...plugins,\n      {\n        type: 'xss',\n        plugin: XSSPlugin,\n        options: {},\n      },\n    ];\n  },\n});\n```\n\n#### \uD83D\uDD0F Modify XSS configuration\n\nAdd a configuration that allows for events where image loading fails\n\n```js\nimport { config, XSSPlugin } from 'md-editor-rt';\n// import { getDefaultWhiteList } from 'xss';\n\nconfig({\n  markdownItPlugins(plugins) {\n    return [\n      ...plugins,\n      {\n        type: 'xss',\n        plugin: XSSPlugin,\n        options: {\n          // Option 1: Extend All by Yourself\n          // xss() {\n          //   return {\n          //     whiteList: Object.assign({}, getDefaultWhiteList(), {\n          //       // If you need to use task list, please keep this configuration\n          //       img: ['class'],\n          //       input: ['class', 'disabled', 'type', 'checked'],\n          //       // If you need to use embedded video code, please keep this configuration\n          //       iframe: [\n          //         'class',\n          //         'width',\n          //         'height',\n          //         'src',\n          //         'title',\n          //         'border',\n          //         'frameborder',\n          //         'framespacing',\n          //         'allow',\n          //         'allowfullscreen'\n          //       ],\n          //       img: ['onerror']\n          //     })\n          //   };\n          // }\n          // Option 2: Add on Top of the Default Whitelist. ^4.15.6\n          extendedWhiteList: {\n            img: ['onerror'],\n          },\n        },\n      },\n    ];\n  },\n});\n```\n\nMore configuration references: [js-xss](https://github.com/leizongmin/js-xss/tree/master)\n\n### \uD83D\uDD12 Prevent XSS after compilation\n\nUsing `sanitize` to sanitize `html`. eg: `sanitize-html`\n\n```shell\nyarn add sanitize-html\n```\n\n```jsx\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\nimport sanitizeHtml from 'sanitize-html';\n\nconst sanitize = (html) => sanitizeHtml(html);\n\nexport default () => {\n  return <MdEditor sanitize={sanitize} />;\n};\n```\n\n### \uD83D\uDDC2 Folding Document Content\n\n```js\nimport { config } from 'md-editor-rt';\nimport { foldGutter } from '@codemirror/language';\nimport { lineNumbers } from '@codemirror/view';\n\nconfig({\n  codeMirrorExtensions(_theme, extensions) {\n    return [...extensions, lineNumbers(), foldGutter()];\n  },\n});\n```\n\n### \uD83C\uDFC4\uD83C\uDFFB‍♂️ Open Links In New Window\n\n1. Install additional extensions\n\n```shell\nyarn add markdown-it-link-attributes\n```\n\n2. Add extensions to the compiler\n\n```js\nimport { config } from 'md-editor-rt';\nimport LinkAttr from 'markdown-it-link-attributes';\n// import Anchor from 'markdown-it-anchor';\n\nconfig({\n  markdownItPlugins(plugins) {\n    return [\n      ...plugins,\n      {\n        type: 'linkAttr',\n        plugin: LinkAttr,\n        options: {\n          matcher(href: string) {\n            // If markdown-it-anchor is used.\n            // Anchor links at the heading should be ignored.\n            return !href.startsWith('#');\n          },\n          attrs: {\n            target: '_blank',\n          },\n        },\n      },\n      // {\n      //   type: 'anchor',\n      //   plugin: Anchor,\n      //   options: {\n      //     permalink: Anchor.permalink.headerLink(),\n      //     slugify(s: string) {\n      //       return s;\n      //     }\n      //   }\n      // }\n    ];\n  },\n});\n```\n\n### ☑️ Toggleable status task list\n\n```js\nimport { config } from 'md-editor-rt';\nconfig({\n  markdownItPlugins(plugins, { editorId }) {\n    return plugins.map((item) => {\n      if (item.type === 'taskList') {\n        return {\n          ...item,\n          options: {\n            ...item.options,\n            enabled: true,\n            // If you just want to enable this feature for a certain editor\n            // enabled: editorId === 'myId'\n          },\n        };\n      }\n      return item;\n    });\n  },\n});\n```\n\n```jsx\n<MdEditor id=\"myId\" modelValue={text} onChange={setText} />\n```\n\n### \uD83C\uDFB3 co-working\n\nInstall [yjs](https://github.com/yjs/yjs)\n\n```shell\nnpm i yjs y-codemirror.next y-websocket\n```\n\nAdd the `yjs` extension in main.js:\n\n```js\nimport { config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nimport * as Y from 'yjs';\nimport * as random from 'lib0/random';\nimport { yCollab } from 'y-codemirror.next';\nimport { WebsocketProvider } from 'y-websocket';\n\nconst usercolors = [\n  { color: '#30bced', light: '#30bced33' },\n  { color: '#6eeb83', light: '#6eeb8333' },\n  { color: '#ffbc42', light: '#ffbc4233' },\n  { color: '#ecd444', light: '#ecd44433' },\n  { color: '#ee6352', light: '#ee635233' },\n  { color: '#9ac2c9', light: '#9ac2c933' },\n  { color: '#8acb88', light: '#8acb8833' },\n  { color: '#1be7ff', light: '#1be7ff33' },\n];\n\n// select a random color for this user\nconst userColor = usercolors[random.uint32() % usercolors.length];\n\nconst ydoc = new Y.Doc();\nconst provider = new WebsocketProvider(\n  // Start a websocket server quickly: https://github.com/yjs/y-websocket?tab=readme-ov-file#start-a-y-websocket-server\n  'ws://127.0.0.1:1234',\n  'md-editor-v3-room',\n  ydoc\n);\nconst ytext = ydoc.getText('module-name');\n\nconst undoManager = new Y.UndoManager(ytext);\n\nprovider.awareness.setLocalStateField('user', {\n  name: 'Anonymous ' + Math.floor(Math.random() * 100),\n  color: userColor.color,\n  colorLight: userColor.light,\n});\n\nconfig({\n  codeMirrorExtensions(_theme, extensions) {\n    return [...extensions, yCollab(ytext, provider.awareness, { undoManager })];\n  },\n});\n```\n\nIf you want to use it in only one editor, try distinguishing using `editorId` (`^4.20.0`):\n\n```js\nconfig({\n  codeMirrorExtensions(_theme, extensions, _keyBindings, { editorId }) {\n    return editorId === 'myId'\n      ? [...extensions, yCollab(ytext, provider.awareness, { undoManager })]\n      : extensions;\n  },\n});\n```\n\n### \uD83D\uDCDD Extend code block tool\n\n```js\nconfig({\n  markdownItPlugins(plugins, { editorId }) {\n    return plugins.map((item) => {\n      switch (item.type) {\n        case 'code': {\n          return {\n            ...item,\n            options: {\n              ...item.options,\n              extraTools:\n                '<span class=\"extra-code-tools\">Additional features</span>',\n            },\n          };\n        }\n\n        default: {\n          return item;\n        }\n      }\n    });\n  },\n});\n```\n\nIt will be displayed after the 'Copy Code' button. By working together with the `onRemount` event, you can correctly retrieve these elements using `querySelectorAll` and bind event listeners to them.\n\nHere is an example of how to print code:\n\n```js\nconst onRemount = useCallback(() => {\n  document\n    .querySelectorAll(`#${editorId} .${prefix}-preview .${prefix}-code`)\n    .forEach((codeBlock: Element) => {\n      const tools = codeBlock.querySelectorAll('.extra-code-tools');\n      tools.forEach((item) => {\n        item.addEventListener('click', (e) => {\n          e.preventDefault();\n\n          const activeCode =\n            codeBlock.querySelector('input:checked + pre code') ||\n            codeBlock.querySelector('pre code');\n\n          const codeText = activeCode?.textContent;\n\n          console.log(codeText);\n        });\n      });\n    });\n}, []);\n```\n\n## \uD83E\uDDFB Edit This Page\n\n[demo-en-US](https://github.com/imzbf/md-editor-rt/blob/dev-docs/public/demo-en-US.md)\n",{EDITOR_VERSION:l.El.FL.replace("^","")});function c(){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i(),{children:[(0,o.jsx)("title",{children:"Examples - ".concat(s.eh)}),(0,o.jsx)("meta",{name:"keywords",content:s.p8}),(0,o.jsx)("meta",{name:"description",content:s.vn}),(0,o.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"})]}),(0,o.jsx)(d.A,{editorId:"md-demo-en",value:m})]})}},7239:(n,e,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/en-US/demo",function(){return t(5475)}])}},n=>{var e=e=>n(n.s=e);n.O(0,[7450,636,6593,8792],()=>e(7239)),_N_E=n.O()}]);