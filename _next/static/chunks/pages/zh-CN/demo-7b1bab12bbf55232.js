(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1806],{11:(n,e,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/zh-CN/demo",function(){return t(43)}])},43:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>c});var r=t(7876),o=t(7328),i=t.n(o),s=t(788),d=t(4404),m=t(2845),l=t(9891);let a=(0,m.xA)("## \uD83D\uDE01 基本使用示例\n\n目前一直在迭代开发，所以尽量安装最新版本。发布日志请前往：[releases](https://github.com/imzbf/md-editor-rt/releases)\n\n### \uD83E\uDD16 NPM 安装\n\n```shell [install:npm]\nnpm install md-editor-rt\n```\n\n```shell [install:yarn]\nyarn add md-editor-rt\n```\n\n!!! warning\n\n~~当使用服务端渲染时，请务必设置`editorId`为固定值。~~\n\n5.0 开始，没有该限制了。\n\n!!!\n\n### \uD83E\uDD13 CDN 链接\n\n通过直接链接生产版本来使用，下面是一个小例子：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n  <head>\n    <link href=\"https://unpkg.com/md-editor-rt@${EDITOR_VERSION}/lib/style.css\" rel=\"stylesheet\" />\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    <script src=\"https://unpkg.com/react@18.2.0/umd/react.production.min.js\"><\/script>\n    <script src=\"https://unpkg.com/react-dom@18.2.0/umd/react-dom.production.min.js\"><\/script>\n    <script src=\"https://unpkg.com/md-editor-rt@${EDITOR_VERSION}/lib/umd/index.js\"><\/script>\n    <script>\n      ReactDOM.createRoot(document.getElementById('root')).render(\n        React.createElement(MdEditorRT.MdEditor, {\n          modelValue: 'Hello Editor!!',\n        })\n      );\n    <\/script>\n  </body>\n</html>\n```\n\n#### \uD83E\uDD13 基本使用\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt！');\n  return <MdEditor modelValue={text} onChange={setText} />;\n};\n```\n\n#### \uD83D\uDCD6 仅预览\n\n```jsx\nimport { useState } from 'react';\nimport { MdPreview, MdCatalog } from 'md-editor-rt';\nimport 'md-editor-rt/lib/preview.css';\n\nexport default () => {\n  const [id] = useState('preview-only');\n  const [scrollElement] = useState(document.documentElement);\n  const [text] = useState('hello md-editor-rt！');\n\n  return (\n    <>\n      <MdPreview id={id} modelValue={text} />\n      <MdCatalog editorId={id} scrollElement={scrollElement} />\n    </>\n  );\n};\n```\n\n!!! warning\n\n当使用服务端渲染时，`scrollElement`应该是字符类型，例：`html`、`body`、`#id`、`.class`。\n\n!!!\n\n## \uD83C\uDF9B Web Component 中使用\n\n完整的示例参考源码中提供的[示例项目](https://github.com/imzbf/md-editor-rt/tree/main/example/webComponent)\n\n下面是注意事项：\n\n1. 图片放大查看功能无效，需要自行实现！！！\n2. 不能默认的使用 CDN 引用依赖库，参考[[自行引入扩展库]](https://imzbf.github.io/md-editor-rt/zh-CN/demo#%F0%9F%99%8D%F0%9F%8F%BB%E2%80%8D%E2%99%82%EF%B8%8F%20%E8%87%AA%E8%A1%8C%E5%BC%95%E5%85%A5%E6%89%A9%E5%B1%95%E5%BA%93)！！！\n\n## \uD83E\uDD42 扩展功能\n\n这里包含了一些编辑器`api`的使用示范\n\n### \uD83E\uDD76 自定义快捷键\n\n- 内置的快捷键配置的源码：[commands.ts](https://github.com/imzbf/md-editor-rt/blob/develop/packages/MdEditor/layouts/Content/codemirror/commands.ts)，它们作为扩展项被添加到了`codemirror`。\n\n- 想要替换、删除快捷键的基本原理是找到对应的扩展，然后遍历这个快捷键配置的数组，找到并处理它。\n\n- 事实上，`config`中`codeMirrorExtensions`的第二入参`extensions`是一个数组，它的第一项就是快捷键扩展，第三入参就是默认的快捷键配置。\n\n#### \uD83D\uDC85 修改快捷键\n\n将`Ctrl-b`修改为`Ctrl-m`\n\n```js\nimport { config } from 'md-editor-rt';\nimport { keymap } from '@codemirror/view';\n\nconfig({\n  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]\n  codeMirrorExtensions(theme, extensions, mdEditorCommands) {\n    const newExtensions = [...extensions];\n    // 1. 先把默认的快捷键扩展移除\n    newExtensions.shift();\n\n    // 2. 参考快捷键配置的源码，找到CtrlB的配置项在mdEditorCommands中的位置\n    const CtrlB = mdEditorCommands[0];\n\n    // 3. 配置codemirror快捷键的文档\n    // https://codemirror.net/docs/ref/#commands\n    const CtrlM = {\n      // 这里我们需要CtrlB默认触发执行的run方法，如果是新增快捷键等，就需要自行处理触发逻辑\n      ...CtrlB,\n      key: 'Ctrl-m',\n      mac: 'Cmd-m',\n    };\n\n    // 4. 把修改后的快捷键放到待构建扩展的数组中\n    const newMdEditorCommands = [CtrlM, ...mdEditorCommands.filter((i) => i.key !== 'Ctrl-b')];\n\n    newExtensions.push(keymap.of(newMdEditorCommands));\n\n    return newExtensions;\n  },\n});\n```\n\n#### ✂️ 删除快捷键\n\n禁用所有快捷键\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]\n  codeMirrorExtensions(theme, extensions) {\n    const newExtensions = [...extensions];\n    // 1. 把默认的快捷键扩展移除\n    newExtensions.shift();\n\n    // 2. 返回扩展列表即可\n    return newExtensions;\n  },\n});\n```\n\n#### \uD83D\uDC89 新增快捷键\n\n如果涉及到向编辑框插入内容，这是需要借助组件实例上绑定的`insert`方法，参考[手动向文本框插入内容](/md-editor-rt/zh-CN/docs#%F0%9F%92%89%20insert)。\n\n如果不是在编辑器所在的组件中使用`config`，这是无法拿到编辑器组件实例，这时，你可能需要借助`event-bus`。\n\n示例实现`Ctrl+m`向编辑框插入标记模块(`==mark==`)\n\n`index.ts`\n\n```js\nimport { config } from 'md-editor-rt';\nimport { keymap, KeyBinding } from '@codemirror/view';\n// 假设你使用了EventBus\nimport bus from '@/utils/event-bus';\n\nconfig({\n  // [keymap, minimalSetup, markdown, EditorView.lineWrapping, EditorView.updateListener, EditorView.domEventHandlers, oneDark??oneLight]\n  codeMirrorExtensions(theme, extensions, mdEditorCommands) {\n    const newExtensions = [...extensions];\n    // 1. 先把默认的快捷键扩展移除\n    newExtensions.shift();\n\n    // 2. 创建一个新的快捷键配置，参考https://codemirror.net/docs/ref/#commands\n    const CtrlM: KeyBinding = {\n      key: 'Ctrl-m',\n      mac: 'Cmd-m',\n      run: () => {\n        bus.emit('insertMarkBlock');\n        return true;\n      },\n    };\n\n    // 4. 把新的快捷键添加到数组中\n    const newMdEditorCommands = [...mdEditorCommands, CtrlM];\n\n    newExtensions.push(keymap.of(newMdEditorCommands));\n\n    return newExtensions;\n  },\n});\n```\n\n接下来在编辑器所在组件监听`insertMarkBlock`这个事件\n\n`App.tsx`\n\n```tsx\nimport { useState, useRef, useEffect } from 'react';\nimport { MdEditor, ExposeParam } from 'md-editor-rt';\n// 假设你使用了EventBus\nimport bus from '@/utils/event-bus';\n\nimport 'md-editor-rt/lib/style.css';\n\nconst App = () => {\n  const [text] = useState('## md-editor-rt\\n\\n');\n  const mdEditorRef = useRef<ExposeParam>();\n\n  useEffect(() => {\n    bus.on('insertMarkBlock', () => {\n      mdEditorRef.current?.insert((selectedText) => {\n        return {\n          targetValue: `==${selectedText}==`,\n          select: true,\n          deviationStart: 2,\n          deviationEnd: -2,\n        };\n      });\n    });\n  }, []);\n\n  return <MdEditor modelValue={text} ref={mdEditorRef} />;\n};\n```\n\n附：`EventBus`最简单实现\n\n```ts\n/* eslint-disable @typescript-eslint/ban-types */\nclass EventBus {\n  private events: Map<string, Function[]>;\n\n  constructor() {\n    this.events = new Map();\n  }\n\n  on(eventName: string, fn: Function) {\n    if (!eventName) {\n      console.error('无效的事件名称');\n      return false;\n    }\n\n    if (!(fn instanceof Function)) {\n      console.error('无效的回调方法');\n      return false;\n    }\n\n    const fns = this.events.get(eventName) || [];\n    fns.push(fn);\n    this.events.set(eventName, fns);\n  }\n\n  emit(eventName: string, ...args: any[]) {\n    this.events.get(eventName)?.forEach((fn) => {\n      fn(args);\n    });\n  }\n}\n\nexport default new EventBus();\n```\n\n### \uD83C\uDF66 主题切换\n\n主题分为了编辑器主题（`theme`，称为全局主题）、预览内容主题（`previewTheme`）和块级代码主题（`codeTheme`）。\n\n#### \uD83C\uDF67 编辑器主题\n\n支持默认和暗夜模式两种\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt！');\n  const [theme] = useState('dark');\n  return <MdEditor modelValue={text} onChange={setText} theme={theme} />;\n};\n```\n\n#### \uD83C\uDF61 预览主题\n\n内置了`default`、`github`、`vuepress`、`mk-cute`、`smart-blue`、`cyanosis`6 种主题，在一些直接预览文档内容时使用。并且支持在线切换（修改`previewTheme`即可）和自行扩展。\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt！');\n  const [previewTheme] = useState('github');\n  return <MdEditor modelValue={text} onChange={setText} previewTheme={previewTheme} />;\n};\n```\n\n- 自定义\n\n  1. 先以`xxx-theme`为类名，定义你的主题`css`，xxx 是主题名称，具体的内容参考[markdown-theme](https://github.com/imzbf/markdown-theme)\n\n  _xxx.css_\n\n  ```css\n  .xxx-theme code {\n    color: red;\n  }\n  ```\n\n  2. 全局引入\n\n  ```js\n  import 'xxx.css';\n  ```\n\n  3. 设置`previewTheme`为 xxx\n\n  ```jsx\n  <MdEditor previewTheme=\"xxx\" />\n  ```\n\n#### \uD83C\uDF84 代码主题\n\n内置了`atom`、`a11y`、`github`、`gradient`、`kimbie`、`paraiso`、`qtcreator`、`stackoverflow`代码主题，均来至[highlight.js](https://highlightjs.org/)\n\n- 使用\n\n  ```jsx\n  import { useState } from 'react';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  export default () => {\n    const [text, setText] = useState('hello md-editor-rt！');\n    const [codeTheme] = useState('atom');\n    return <MdEditor modelValue={text} onChange={setText} codeTheme={codeTheme} />;\n  };\n  ```\n\n- 自定义\n\n  1. 找到你喜欢的代码主题，最好支持暗夜模式\n\n  ```js\n  import { config } from 'md-editor-rt';\n\n  config({\n    editorExtensions: {\n      highlight: {\n        css: {\n          xxxxx: {\n            light: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-light.css',\n            dark: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-dark.css',\n          },\n          yyyyy: {\n            light: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-light.css',\n            dark: 'https://unpkg.com/highlight.js@11.2.0/styles/xxxxx-dark.css',\n          },\n        },\n      },\n    },\n  });\n  ```\n\n  你可以通过将`css`的`key`设置为内置名称来覆盖内置的链接。\n\n  2. 设置`codeTheme`\n\n  ```jsx\n  <MdEditor codeTheme=\"xxxxx\" />\n  ```\n\n### \uD83D\uDEE0 扩展库替换\n\nhighlight、prettier、cropper、screenfull 均使用外链引入，在无外网的时候，部分可将项目中已安装的依赖传入，也可以使用下载好的引用。\n\n`screenfull` 的例子：\n\n#### ⚰️ 内置实例\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor, config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n// 引用screenfull\nimport screenfull from 'screenfull';\n\nconfig({\n  editorExtensions: {\n    screenfull: {\n      instance: screenfull,\n    },\n  },\n});\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt！');\n  return <MdEditor modelValue={text} onChange={setText} />;\n};\n```\n\n#### \uD83D\uDCE1 内网链接\n\n对应的 js 文件可以去[unpkg.com](https://unpkg.com)，直接找到对应的文件下载即可。\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor, config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nconfig({\n  editorExtensions: {\n    screenfull: {\n      js: 'https://localhost:8090/screenfull@5.2.0/index.js',\n    },\n  },\n});\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt！');\n  return <MdEditor modelValue={text} onChange={setText} />;\n};\n```\n\n### \uD83D\uDCF7 图片上传\n\n默认可以选择多张图片，支持截图粘贴板上传图片，支持复制网页图片粘贴上传。\n\n> 注意：粘贴板上传时，如果是网页上的 gif 图，无法正确上传为 gif 格式！请保存本地后再手动上传。\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nconst onUploadImg = async (files, callback) => {\n  const res = await Promise.all(\n    files.map((file) => {\n      return new Promise((rev, rej) => {\n        const form = new FormData();\n        form.append('file', file);\n\n        axios\n          .post('/api/img/upload', form, {\n            headers: {\n              'Content-Type': 'multipart/form-data',\n            },\n          })\n          .then((res) => rev(res))\n          .catch((error) => rej(error));\n      });\n    })\n  );\n\n  callback(res.map((item) => item.data.url));\n};\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt！');\n  return <MdEditor modelValue={text} onChange={setText} onUploadImg={onUploadImg} />;\n};\n```\n\n### \uD83C\uDFF3️‍\uD83C\uDF08 语言扩展与替换\n\n```js\nimport { useState } from 'react';\nimport { MdEditor, config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nconfig({\n  editorConfig: {\n    languageUserDefined: {\n      'my-lang': {\n        toolbarTips: {\n          bold: '加粗',\n          underline: '下划线',\n          italic: '斜体',\n          strikeThrough: '删除线',\n          title: '标题',\n          sub: '下标',\n          sup: '上标',\n          quote: '引用',\n          unorderedList: '无序列表',\n          orderedList: '有序列表',\n          task: '任务列表',\n          codeRow: '行内代码',\n          code: '块级代码',\n          link: '链接',\n          image: '图片',\n          table: '表格',\n          mermaid: 'mermaid图',\n          katex: 'katex公式',\n          revoke: '后退',\n          next: '前进',\n          save: '保存',\n          prettier: '美化',\n          pageFullscreen: '浏览器全屏',\n          fullscreen: '屏幕全屏',\n          preview: '预览',\n          htmlPreview: 'html代码预览',\n          catalog: '目录',\n          github: '源码地址',\n        },\n        titleItem: {\n          h1: '一级标题',\n          h2: '二级标题',\n          h3: '三级标题',\n          h4: '四级标题',\n          h5: '五级标题',\n          h6: '六级标题',\n        },\n        imgTitleItem: {\n          link: '添加链接',\n          upload: '上传图片',\n          clip2upload: '裁剪上传',\n        },\n        linkModalTips: {\n          linkTitle: '添加链接',\n          imageTitle: '添加图片',\n          descLabel: '链接描述：',\n          descLabelPlaceHolder: '请输入描述...',\n          urlLabel: '链接地址：',\n          urlLabelPlaceHolder: '请输入链接...',\n          buttonOK: '确定',\n        },\n        clipModalTips: {\n          title: '裁剪图片上传',\n          buttonUpload: '上传',\n        },\n        copyCode: {\n          text: '复制代码',\n          successTips: '已复制！',\n          failTips: '复制失败！',\n        },\n        mermaid: {\n          flow: '流程图',\n          sequence: '时序图',\n          gantt: '甘特图',\n          class: '类图',\n          state: '状态图',\n          pie: '饼图',\n          relationship: '关系图',\n          journey: '旅程图',\n        },\n        katex: {\n          inline: '行内公式',\n          block: '块级公式',\n        },\n        footer: {\n          markdownTotal: '字数',\n          scrollAuto: '同步滚动',\n        },\n      },\n    },\n  },\n});\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt！');\n  const [language] = useState('my-lang');\n\n  return <MdEditor modelValue={text} onChange={setText} language={language} />;\n};\n```\n\n你也可以使用现成的扩展语言：[md-editor-extension](https://github.com/imzbf/md-editor-extension)。使用及贡献方式见扩展库文档~\n\n### \uD83D\uDCC4 目录获取与展示\n\n- 获取\n\n  ```jsx\n  import { useState } from 'react';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  export default () => {\n    const [text, setText] = useState('hello md-editor-rt！');\n    const [catalogList, setList] = useState([]);\n\n    return <MdEditor modelValue={text} onChange={setText} onGetCatalog={setList} />;\n  };\n  ```\n\n- 展示\n\n  使用内置`MdCatalog`组件\n\n  ```jsx\n  import { useState } from 'react';\n  import { MdPreview, MdCatalog } from 'md-editor-rt';\n  import 'md-editor-rt/lib/preview.css';\n\n  const editorId = 'my-editor';\n\n  export default () => {\n    const [state] = useState({\n      text: '# 标题',\n      scrollElement: document.documentElement,\n    });\n\n    return (\n      <>\n        <MdPreview id={editorId} modelValue={state.text} />\n        <MdCatalog editorId={editorId} scrollElement={state.scrollElement} />\n      </>\n    );\n  };\n  ```\n\n### \uD83E\uDE9A 调整工具栏\n\n从`v1.2.0`开始，支持调整工具栏内容顺序和分割符了 \uD83E\uDD14。\n\n```jsx\nimport { useState } from 'react';\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('hello md-editor-rt！');\n  const [toolbars] = useState(['italic', 'underline', '-', 'bold', '=', 'github']);\n\n  return <MdEditor modelValue={text} onChange={setText} toolbars={toolbars} />;\n};\n```\n\n### \uD83D\uDCAA 自定义工具栏\n\n这里包含了`mark`标记扩展普通工具栏和`emoji`扩展下拉工具栏的类型\n\n可运行源码参考本文档[docs](https://github.com/imzbf/md-editor-rt/blob/docs/src/pages/Preview/index.tsx)。\n\n![标记及Emoji预览](https://imzbf.github.io/md-editor-v3/imgs/mark_emoji.gif)\n\n> 更多 emoji，[https://getemoji.com/](https://getemoji.com/)。\n\n### \uD83E\uDDD9‍♂️ 调整编辑器样式\n\n2.x 使用 css 变量定义了大部分内容：\n\n```less\n.css-vars(@isDark) {\n  --md-color: if(@isDark, #999, #222);\n  --md-hover-color: if(@isDark, #bbb, #000);\n  --md-bk-color: if(@isDark, #000, #fff);\n  --md-bk-color-outstand: if(@isDark, #333, #f2f2f2);\n  --md-bk-hover-color: if(@isDark, #1b1a1a, #f5f7fa);\n  --md-border-color: if(@isDark, #2d2d2d, #e6e6e6);\n  --md-border-hover-color: if(@isDark, #636262, #b9b9b9);\n  --md-border-active-color: if(@isDark, #777, #999);\n  --md-modal-mask: #00000073;\n  --md-scrollbar-bg-color: if(@isDark, #0f0f0f, #e2e2e2);\n  --md-scrollbar-thumb-color: if(@isDark, #2d2d2d, #0000004d);\n  --md-scrollbar-thumb-hover-color: if(@isDark, #3a3a3a, #00000059);\n  --md-scrollbar-thumb-active-color: if(@isDark, #3a3a3a, #00000061);\n}\n\n.md-editor {\n  .css-vars(false);\n}\n\n.md-editor-dark {\n  .css-vars(true);\n}\n```\n\n只需要调整对应的 css 变量，比如调整暗夜模式下的背景：\n\n```css\n.md-editor-dark {\n  --md-bk-color: #333 !important;\n}\n```\n\n### \uD83D\uDE4D\uD83C\uDFFB‍♂️ 自行引入扩展库\n\n这里给出一个完全不使用外部链接，全部自行引入的示例：\n\n1. 安装依赖\n\n```shell\nyarn add screenfull katex cropperjs@1 mermaid highlight.js prettier\n```\n\n!!! info\n目前`cropperjs@2`正在优化中，暂未计划切换到 2.0 版本。\n!!!\n\n2. 配置到编辑器\n\n!!! warning\n\n我们建议你在项目入口配置，例如 vite 创建的项目中的 main.js。不要在组件中去调用 `config` ！\n\n!!!\n\nmain.js\n\n```js\nimport { config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nimport screenfull from 'screenfull';\n\nimport katex from 'katex';\nimport 'katex/dist/katex.min.css';\n\nimport Cropper from 'cropperjs';\nimport 'cropperjs/dist/cropper.css';\n\nimport mermaid from 'mermaid';\n\nimport highlight from 'highlight.js';\nimport 'highlight.js/styles/atom-one-dark.css';\n\n// <3.0\n// import prettier from 'prettier';\n// import parserMarkdown from 'prettier/parser-markdown';\n// >=3.0\nimport * as prettier from 'prettier';\nimport parserMarkdown from 'prettier/plugins/markdown';\n\n// 1. symbol引用\n// ${iconfontSvgUrl}\nimport './assets/iconfont.js';\n// 2. font-class引用\n// ${iconfontClassUrl}\nimport './assets/iconfont.css';\n\nconfig({\n  // font-class引用\n  // iconfontType: 'class',\n  editorExtensions: {\n    prettier: {\n      prettierInstance: prettier,\n      parserMarkdownInstance: parserMarkdown,\n    },\n    highlight: {\n      instance: highlight,\n    },\n    screenfull: {\n      instance: screenfull,\n    },\n    katex: {\n      instance: katex,\n    },\n    cropper: {\n      instance: Cropper,\n    },\n    mermaid: {\n      instance: mermaid,\n    },\n  },\n});\n```\n\nApp.jsx\n\n```jsx\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  return <MdEditor modelValue=\"\" />;\n};\n```\n\n> 注意：highlight 的样式自行引入后，将不支持切换代码样式。\n\n### \uD83D\uDD12 编译时防范 XSS\n\n5.0 版本将内置的 XSS 扩展导出了，不再默认添加， 导出的 XSS 扩展在默认白名单的基础上，增加了部分标签和属性：\n\n```json::close\n{\n  \"img\": [\"class\"],\n  // 支持任务列表\n  \"input\": [\"class\", \"disabled\", \"type\", \"checked\"],\n  // 主要支持youtobe、腾讯视频、哔哩哔哩等内嵌视频代码\n  \"iframe\": [\n    \"class\",\n    \"width\",\n    \"height\",\n    \"src\",\n    \"title\",\n    \"border\",\n    \"frameborder\",\n    \"framespacing\",\n    \"allow\",\n    \"allowfullscreen\"\n  ]\n}\n```\n\n#### \uD83D\uDD12 添加 xss 扩展\n\n```js\nimport { config, XSSPlugin } from 'md-editor-rt';\n\nconfig({\n  markdownItPlugins(plugins) {\n    return [\n      ...plugins,\n      {\n        type: 'xss',\n        plugin: XSSPlugin,\n        options: {},\n      },\n    ];\n  },\n});\n```\n\n#### \uD83D\uDD0F 修改 xss 配置\n\n我们添加一个允许图片加载失败的事件\n\n```js\nimport { config, XSSPlugin } from 'md-editor-rt';\n// import { getDefaultWhiteList } from 'xss';\n\nconfig({\n  markdownItPlugins(plugins) {\n    return [\n      ...plugins,\n      {\n        type: 'xss',\n        plugin: XSSPlugin,\n        options: {\n          // 方式一：自行扩展全部\n          // xss() {\n          //   return {\n          //     whiteList: Object.assign({}, getDefaultWhiteList(), {\n          //       // 如果你需要使用任务列表，请保留这项配置\n          //       img: ['class'],\n          //       input: ['class', 'disabled', 'type', 'checked'],\n          //       // 如果你需要使用嵌入视频代码，请保留这项配置\n          //       iframe: [\n          //         'class',\n          //         'width',\n          //         'height',\n          //         'src',\n          //         'title',\n          //         'border',\n          //         'frameborder',\n          //         'framespacing',\n          //         'allow',\n          //         'allowfullscreen'\n          //       ],\n          //       img: ['onerror']\n          //     })\n          //   };\n          // },\n          // 方式二：在默认白名单的基础上新增。^4.15.6\n          extendedWhiteList: {\n            img: ['onerror'],\n          },\n        },\n      },\n    ];\n  },\n});\n```\n\n更新详细配置参考 [js-xss](https://github.com/leizongmin/js-xss/blob/master/README.zh.md)\n\n### \uD83D\uDD12 编译后防范 XSS\n\n通过`sanitize`属性，自行处理不安全的 html 内容。例如：使用`sanitize-html`处理\n\n```shell\nyarn add sanitize-html\n```\n\n```jsx\nimport { MdEditor } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\nimport sanitizeHtml from 'sanitize-html';\n\nconst sanitize = (html) => sanitizeHtml(html);\n\nexport default () => {\n  return <MdEditor sanitize={sanitize} />;\n};\n```\n\n更详细的实现可以参考本文档的源码！\n\n### \uD83D\uDDC2 折叠文档内容\n\n```js\nimport { config } from 'md-editor-rt';\nimport { foldGutter } from '@codemirror/language';\nimport { lineNumbers } from '@codemirror/view';\n\nconfig({\n  codeMirrorExtensions(_theme, extensions) {\n    return [...extensions, lineNumbers(), foldGutter()];\n  },\n});\n```\n\n### \uD83C\uDFC4\uD83C\uDFFB‍♂️ 新窗口打开链接\n\n1. 安装额外的扩展\n\n```shell\nyarn add markdown-it-link-attributes\n```\n\n2. 将扩展添加到编译器中\n\n```js\nimport { config } from 'md-editor-rt';\nimport LinkAttr from 'markdown-it-link-attributes';\n// import Anchor from 'markdown-it-anchor';\n\nconfig({\n  markdownItPlugins(plugins) {\n    return [\n      ...plugins,\n      {\n        type: 'linkAttr',\n        plugin: LinkAttr,\n        options: {\n          matcher(href: string) {\n            // 如果使用了markdown-it-anchor\n            // 应该忽略标题头部的锚点链接\n            return !href.startsWith('#');\n          },\n          attrs: {\n            target: '_blank',\n          },\n        },\n      },\n      // {\n      //   type: 'anchor',\n      //   plugin: Anchor,\n      //   options: {\n      //     permalink: Anchor.permalink.headerLink(),\n      //     slugify(s: string) {\n      //       return s;\n      //     }\n      //   }\n      // }\n    ];\n  },\n});\n```\n\n### ☑️ 可切换状态的任务列表\n\n```js\nimport { config } from 'md-editor-rt';\nconfig({\n  markdownItPlugins(plugins, { editorId }) {\n    return plugins.map((item) => {\n      if (item.type === 'taskList') {\n        return {\n          ...item,\n          options: {\n            ...item.options,\n            enabled: true,\n            // 如果只是想对某个编辑器开启这个功能\n            // enabled: editorId === 'myId'\n          },\n        };\n      }\n      return item;\n    });\n  },\n});\n```\n\n```jsx\n<MdEditor id=\"myId\" modelValue={text} onChange={setText} />\n```\n\n### \uD83C\uDFB3 协同办公\n\n安装[yjs](https://github.com/yjs/yjs)及相关库\n\n```shell\nnpm i yjs y-codemirror.next y-websocket\n```\n\n在 main.js 中添加 yjs 扩展：\n\n```js\nimport { config } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nimport * as Y from 'yjs';\nimport * as random from 'lib0/random';\nimport { yCollab } from 'y-codemirror.next';\nimport { WebsocketProvider } from 'y-websocket';\n\nconst usercolors = [\n  { color: '#30bced', light: '#30bced33' },\n  { color: '#6eeb83', light: '#6eeb8333' },\n  { color: '#ffbc42', light: '#ffbc4233' },\n  { color: '#ecd444', light: '#ecd44433' },\n  { color: '#ee6352', light: '#ee635233' },\n  { color: '#9ac2c9', light: '#9ac2c933' },\n  { color: '#8acb88', light: '#8acb8833' },\n  { color: '#1be7ff', light: '#1be7ff33' },\n];\n\n// select a random color for this user\nconst userColor = usercolors[random.uint32() % usercolors.length];\n\nconst ydoc = new Y.Doc();\nconst provider = new WebsocketProvider(\n  // Start a websocket server quickly: https://github.com/yjs/y-websocket?tab=readme-ov-file#start-a-y-websocket-server\n  'ws://127.0.0.1:1234',\n  'md-editor-v3-room',\n  ydoc\n);\nconst ytext = ydoc.getText('module-name');\n\nconst undoManager = new Y.UndoManager(ytext);\n\nprovider.awareness.setLocalStateField('user', {\n  name: 'Anonymous ' + Math.floor(Math.random() * 100),\n  color: userColor.color,\n  colorLight: userColor.light,\n});\n\nconfig({\n  codeMirrorExtensions(_theme, extensions) {\n    return [...extensions, yCollab(ytext, provider.awareness, { undoManager })];\n  },\n});\n```\n\n如果只想在某一个编辑器中使用，尝试通过`editorId`进行区别(`^4.20.0`)：\n\n```js\nconfig({\n  codeMirrorExtensions(_theme, extensions, _keyBindings, { editorId }) {\n    return editorId === 'myId' ? [...extensions, yCollab(ytext, provider.awareness, { undoManager })] : extensions;\n  },\n});\n```\n\n### \uD83D\uDCDD 扩展代码块工具\n\n```js\nconfig({\n  markdownItPlugins(plugins, { editorId }) {\n    return plugins.map((item) => {\n      switch (item.type) {\n        case 'code': {\n          return {\n            ...item,\n            options: {\n              ...item.options,\n              extraTools: '<span class=\"extra-code-tools\">额外的功能</span>',\n              // 或者\n              extraTools: ({ lang }) => '<span class=\"extra-code-tools\">额外的功能</span>',\n            },\n          };\n        }\n\n        default: {\n          return item;\n        }\n      }\n    });\n  },\n});\n```\n\n它会被显示在复制代码按钮后面，配合`onRemount`事件，你能够正确的通过`querySelectorAll`获取到它们并绑定监听事件。\n\n下面是一个打印代码的示例：\n\n```js\nconst onRemount = useCallback(() => {\n  document.querySelectorAll(`#${editorId} .${prefix}-preview .${prefix}-code`).forEach((codeBlock: Element) => {\n    const tools = codeBlock.querySelectorAll('.extra-code-tools');\n    tools.forEach((item) => {\n      item.addEventListener('click', (e) => {\n        e.preventDefault();\n\n        const activeCode = codeBlock.querySelector('input:checked + pre code') || codeBlock.querySelector('pre code');\n\n        const codeText = activeCode?.textContent;\n\n        console.log(codeText);\n      });\n    });\n  });\n}, []);\n```\n\n## \uD83E\uDDFB 编辑此页面\n\n[demo-zh-CN](https://github.com/imzbf/md-editor-rt/blob/dev-docs/public/demo-zh-CN.md)\n",{EDITOR_VERSION:l.El.FL.replace("^","")});function c(){return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i(),{children:[(0,r.jsx)("title",{children:"示例 - ".concat(s.Ix)}),(0,r.jsx)("meta",{name:"keywords",content:s.hN}),(0,r.jsx)("meta",{name:"description",content:s.f4}),(0,r.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"})]}),(0,r.jsx)(d.A,{editorId:"md-demo-zh",value:a})]})}},4404:(n,e,t)=>{"use strict";t.d(e,{A:()=>p});var r=t(7876),o=t(8854),i=t(409),s=t(6653),d=t(4232),m=t(2932),l=t(9385);let a=(n,e)=>{history.replaceState({},"","".concat(location.pathname,"#").concat(e.text))},c=n=>{let e=(0,i.G)(n=>n.setting),t=(0,d.useRef)(null),o=(0,d.useRef)(!0),s=(0,d.useCallback)((n,e)=>{if(!e||!o.current)return;let r=(0,l.Uw)(),i=e.offsetTop-t.current.scrollTop;i>200?r(t.current,e.offsetTop-200):i<100&&r(t.current,e.offsetTop-100)},[]);return(0,r.jsx)("div",{className:"catalog",onMouseEnter:()=>{o.current=!1},onMouseLeave:()=>{o.current=!0},children:(0,r.jsx)("div",{ref:t,className:"affix",children:(0,r.jsx)(m.M,{scrollElementOffsetTop:10,editorId:n.editorId,theme:e.theme,scrollElement:"html",onClick:a,onActive:s})})})},p=n=>{let{showCodeRowNumber:e=!0}=n,t=(0,s.u)(),d=(0,i.G)(n=>n.setting);return(0,r.jsx)("div",{className:"container",children:(0,r.jsxs)("div",{className:"doc",children:[(0,r.jsx)("div",{className:"content",children:(0,r.jsx)(o.A,{id:n.editorId,language:t,theme:d.theme,value:n.value,previewTheme:d.previewTheme,showCodeRowNumber:e,codeTheme:d.codeTheme})}),(0,r.jsx)(c,{editorId:n.editorId})]})})}}},n=>{var e=e=>n(n.s=e);n.O(0,[7450,636,6593,8792],()=>e(11)),_N_E=n.O()}]);