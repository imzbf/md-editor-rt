(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7369],{8613:(n,e,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/zh-CN/api",function(){return t(825)}])},2676:(n,e,t)=>{"use strict";t.d(e,{A:()=>u});var o=t(4848),r=t(7635),i=t(9276),s=t(9784),l=t(6540),a=t(8373),d=t(5172);let m=(n,e)=>{history.replaceState({},"","".concat(location.pathname,"#").concat(e.text))},c=n=>{let e=(0,i.G)(n=>n.setting),t=(0,l.useRef)(null),r=(0,l.useRef)(!0),s=(0,l.useCallback)((n,e)=>{if(!e||!r.current)return;let o=(0,d.Uw)(),i=e.offsetTop-t.current.scrollTop;i>200?o(t.current,e.offsetTop-200):i<100&&o(t.current,e.offsetTop-100)},[]);return(0,o.jsx)("div",{className:"catalog",onMouseEnter:()=>{r.current=!1},onMouseLeave:()=>{r.current=!0},children:(0,o.jsx)("div",{ref:t,className:"affix",children:(0,o.jsx)(a.M,{scrollElementOffsetTop:10,editorId:n.editorId,theme:e.theme,scrollElement:"html",onClick:m,onActive:s})})})},u=n=>{let{showCodeRowNumber:e=!0}=n,t=(0,s.u)(),l=(0,i.G)(n=>n.setting);return(0,o.jsx)("div",{className:"container",children:(0,o.jsxs)("div",{className:"doc",children:[(0,o.jsx)("div",{className:"content",children:(0,o.jsx)(r.A,{id:n.editorId,language:t,theme:l.theme,value:n.value,previewTheme:l.previewTheme,showCodeRowNumber:e,codeTheme:l.codeTheme})}),(0,o.jsx)(c,{editorId:n.editorId})]})})}},825:(n,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>a});var o=t(4848),r=t(3368),i=t.n(r),s=t(701),l=t(2676);function a(){return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i(),{children:[(0,o.jsx)("title",{children:"API - ".concat(s.Ix)}),(0,o.jsx)("meta",{name:"keywords",content:s.hN}),(0,o.jsx)("meta",{name:"description",content:s.f4}),(0,o.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1"})]}),(0,o.jsx)(l.A,{editorId:"md-api-zh",value:"> 在线尝试示例：[传送门](https://codesandbox.io/s/elated-khorana-65jmr)。\n\n## \uD83D\uDD16 MdPreview Props\n\n这是预览组件`MdPreview`的`Props`，它们同样也是`MdEditor`的：\n\n### \uD83D\uDCC3 value\n\n- **类型**：`string`\n- **默认值**：`''`\n\n  编辑的内容。\n\n  ```jsx\n  <MdEditor value=\"xxx\" />\n  ```\n\n---\n\n### \uD83D\uDCC3 modelValue\n\n- **类型**：`string`\n- **默认值**：`''`\n\n  已过时。5.x 版本开始使用 value 替换。\n\n---\n\n### \uD83D\uDECD theme\n\n- **类型**：`'light' | 'dark'`\n- **默认值**：`'light'`\n\n  编辑器主题。\n\n  ```jsx\n  <MdEditor theme=\"dark\" />\n  ```\n\n---\n\n### \uD83C\uDF80 className\n\n- **类型**：`string`\n- **默认值**：`''`\n\n  ...\n\n---\n\n### \uD83D\uDD24 language\n\n- **类型**：`string`\n- **默认值**：`'zh-CN'`\n\n  内置中英文(`'zh-CN'`, `'en-US'`)，可自行扩展其他语言，同时可覆盖内置的中英文。\n\n  你也可以使用现成的扩展语言：[md-editor-extension](https://github.com/imzbf/md-editor-extension)。使用及贡献方式见扩展库文档~\n\n---\n\n### \uD83C\uDFB2 editorId\n\n- **类型**：`string`\n- **默认值**：`'md-editor-r\\d'`\n\n  已过时。5.x 版本开始使用 id 替换。\n\n  编辑器唯一标识，使用默认前缀和`useId`拼接。~~当使用服务端渲染时，请务必设置该属性为固定值，防止产生服务端与客户端渲染内容不一致错误提示。~~，5.0 开始没有该限制。\n\n---\n\n### \uD83C\uDFB2 id\n\n- **类型**：`string`\n- **默认值**：`'md-editor-r\\d'`\n\n  编辑器唯一标识，使用默认前缀和`useId`拼接。\n\n---\n\n### \uD83D\uDD22 showCodeRowNumber\n\n- **类型**：`boolean`\n- **默认值**：`true`\n\n  代码块是否显示行号。\n\n---\n\n### \uD83D\uDD26 previewTheme\n\n- **类型**：`'default' | 'github' | 'vuepress' | 'mk-cute' | 'smart-blue' | 'cyanosis'`\n- **默认值**：`'default'`\n\n  预览内容主题，支持自定义。\n\n  主题自定义方式：\n\n  1. 编辑 css\n\n  ```css\n  .xxx-theme {\n    color: red;\n  }\n  ```\n\n  2. 设置`previewTheme`\n\n  ```jsx\n  <MdEditor previewTheme=\"xxx\" />\n  ```\n\n  参考[markdown-theme](https://github.com/imzbf/markdown-theme)项目。\n\n---\n\n### \uD83C\uDF85\uD83C\uDFFB style\n\n- **类型**：`CSSProperties`\n- **默认值**：`{}`\n\n  编辑器内联样式。\n\n---\n\n### ☝️ noMermaid\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  如果你不希望使用图表展示内容，可以设置关闭。\n\n```jsx\n<MdEditor noMermaid />\n```\n\n---\n\n### ❌ noKatex\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  如果你不希望使用数学公式展示内容，可以设置关闭。\n\n```jsx\n<MdEditor noKatex />\n```\n\n---\n\n### \uD83E\uDD89 codeTheme\n\n- **类型**：`'atom'|'a11y'|'github'|'gradient'|'kimbie'|'paraiso'|'qtcreator'|'stackoverflow'`\n- **默认值**：`'atom'`\n\n  代码块高亮样式名称。\n\n  你可以添加自己的样式，把该属性设置为你想要的即可，方式如下：\n\n  1. 配置样式链接\n\n  ```js\n  import { config } from 'md-editor-rt';\n\n  config({\n    editorExtensions: {\n      highlight: {\n        css: {\n          atom: {\n            light:\n              'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/atom-one-light.min.css',\n            dark: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/atom-one-dark.min.css',\n          },\n          xxx: {\n            light:\n              'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/xxx-light.css',\n            dark: 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/xxx-dark.css',\n          },\n        },\n      },\n    },\n  });\n  ```\n\n  2. 设置`codeTheme`\n\n  ```jsx\n  <MdEditor codeTheme=\"xxx\" />\n  ```\n\n---\n\n### \uD83C\uDFB1 mdHeadingId\n\n- **类型**：`(text: string, level: number, index: number) => string`\n- **默认值**：`(text) => text`\n\n  构造标题`ID`的生成方式。\n\n  ```jsx\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const mdHeadingId = (_text, _level, index) => `heading-${index}`;\n\n  export default () => {\n    return <MdEditor mdHeadingId={mdHeadingId} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDC23 sanitize\n\n- **类型**：`(html: string) => string`\n- **默认值**：`(html) => html`\n\n  通过该属性修改编译后的 html 内容\n\n  !!! warning\n\n  该属性为保留属性\n\n  基本的危险代码处理方案在 3.x 以后已内置，例如`<script>alert(123)<\/script>`，4.11.3 之前建议使用该属性来清理更复杂的内容以防止 XSS。\n\n  在 4.11.3 以后实现了更完善的处理方案，[参考](https://imzbf.github.io/md-editor-rt/zh-CN/demo#%F0%9F%94%8F%20%E4%BF%AE%E6%94%B9%20xss%20%E9%85%8D%E7%BD%AE)\n\n  !!!\n\n  使用`sanitize-html`演示\n\n  ```jsx\n  import sanitizeHtml from 'sanitize-html';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const sanitize = (html) => sanitizeHtml(html);\n\n  export default () => {\n    return <MdEditor sanitize={sanitize} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDC85 formatCopiedText\n\n- **类型**：`(text: string) => string`\n- **默认值**：`(text) => text`\n\n  格式化复制代码\n\n  ```jsx\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const formatCopiedText = (text: string) => {\n    return `${text}  - from md-editor-rt`;\n  };\n\n  export default () => {\n    return <MdEditor formatCopiedText={formatCopiedText} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDEC1 codeStyleReverse\n\n- **类型**：`boolean`\n- **默认值**：`true`\n\n  某些预览主题的代码模块背景是暗色系，将这个属性设置为 true，会自动在该主题下的 light 模式下使用暗色系的代码风格。\n\n---\n\n### \uD83E\uDDFC codeStyleReverseList\n\n- **类型**：`Array`\n- **默认值**：`['default', 'mk-cute']`\n\n  需要自动调整的预览主题，已默认包含 default、mk-cute。\n\n---\n\n### \uD83D\uDD4A noHighlight\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  不高亮代码，也不会加载相应的扩展库\n\n---\n\n### \uD83D\uDD4A noImgZoomIn\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  是否关闭编辑器默认的放大功能。\n\n  ```html\n  <MdEditor noImgZoomIn />\n  ```\n\n  在`4.15.4`以后，也可以设置`.not-zoom`来禁用它\n\n  ```markdown\n  <img class=\"not-zoom\">\n  ```\n\n---\n\n### \uD83D\uDE2C customIcon\n\n- **类型**：`CustomIcon`\n- **默认值**：`{}`\n\n  自定义的图标\n\n  !!! warning 类型提示\n\n  copy、collapse-tips 对应的图标只能是字符串，其他的都可以是组件或者字符串\n\n  !!!\n\n  ```tsx\n  import React from 'react';\n  import type { CustomIcon } from 'md-editor-rt';\n  import { MdEditor, StrIcon } from 'md-editor-rt';\n  // 假设你使用了三方图标库或者自定义了图标组件\n  import { IconFont } from 'tdesign-icons-react';\n  import 'md-editor-rt/lib/style.css';\n\n  const customIcon: CustomIcon = {\n    bold: {\n      component: 'A',\n    },\n    // 演示使用默认图标复制内容\n    copy: StrIcon('copy', {}),\n    // copy: '<i class=\"fa fa-car\"></i>',\n    // 'collapse-tips': '<i class=\"fa fa-car\"></i>',\n    preview: {\n      component: '<i class=\"fa fa-car\"></i>',\n    },\n    github: {\n      component: IconFont,\n      props: {\n        name: 'sneer',\n      },\n    },\n  };\n\n  export default () => {\n    return <MdEditor modelValue=\"\" customIcon={customIcon} />;\n  };\n  ```\n\n  类型`CustomIcon`\n\n  ```ts\n  type IconName =\n    | 'bold'\n    | 'underline'\n    | 'italic'\n    | 'strike-through'\n    | 'title'\n    | 'sub'\n    | 'sup'\n    | 'quote'\n    | 'unordered-list'\n    | 'ordered-list'\n    | 'task'\n    | 'code-row'\n    | 'code'\n    | 'link'\n    | 'image'\n    | 'table'\n    | 'revoke'\n    | 'next'\n    | 'save'\n    | 'prettier'\n    | 'minimize'\n    | 'maximize'\n    | 'fullscreen-exit'\n    | 'fullscreen'\n    | 'preview-only'\n    | 'preview'\n    | 'preview-html'\n    | 'catalog'\n    | 'github'\n    | 'mermaid'\n    | 'formula'\n    | 'close'\n    | 'delete'\n    | 'upload';\n\n  type CustomIcon = {\n    [key in IconName]?: {\n      component: Component | JSX.Element | string;\n      props: {\n        [key: string | number | symbol]: any;\n      };\n    };\n  } & {\n    copy?: string;\n    'collapse-tips'?: string;\n  };\n  ```\n\n---\n\n### \uD83D\uDD4A sanitizeMermaid\n\n- **类型**：`(h: string) => Promise<string>`\n- **默认值**：`(h: string) => Promise.resolve(h)`\n\n  转换生成的 mermaid 代码\n\n---\n\n### \uD83D\uDD79 codeFoldable\n\n- **类型**：`boolean`\n- **默认值**：`true`\n\n  是否开启折叠代码功能\n\n---\n\n### ⏲ autoFoldThreshold\n\n- **类型**：`number`\n- **默认值**：`30`\n\n  触发自动折叠代码的行数阈值\n\n---\n\n## \uD83D\uDD29 MdEditor Props\n\n除去和`MdPreivew`相同的以外：\n\n### \uD83D\uDCBB pageFullscreen\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  页面内全屏。\n\n---\n\n### \uD83D\uDCF1 preview\n\n- **类型**：`boolean`\n- **默认值**：`true`\n\n  是否显示预览。\n\n---\n\n### \uD83D\uDCC0 htmlPreview\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  是否显示 html 预览。当设置为`true`时，需要将`preview`设置为`false`\n\n  ```jsx\n  <MdEditor htmlPreview preview={false} />\n  ```\n\n---\n\n### \uD83E\uDDF1 toolbars\n\n- **类型**：`Array`\n- **默认值**：`[all]`\n\n  选择性展示工具栏，可选内容见下方。\n\n  你可以随意排序工具栏，通过`'-'`分割两个工具，通过`'='`实现左右放置！\n\n  _[all]_\n\n  ```js\n  [\n    'bold',\n    'underline',\n    'italic',\n    '-',\n    'strikeThrough',\n    'sub',\n    'sup',\n    'quote',\n    'unorderedList',\n    'orderedList',\n    'task',\n    '-',\n    'codeRow',\n    'code',\n    'link',\n    'image',\n    'table',\n    'mermaid',\n    'katex',\n    '-',\n    'revoke',\n    'next',\n    'save',\n    '=',\n    'pageFullscreen',\n    'fullscreen',\n    'preview',\n    'previewOnly',\n    'htmlPreview',\n    'catalog',\n    'github',\n  ];\n\n  // 对应功能名称\n  [\n    '加粗',\n    '下划线',\n    '斜体',\n    '删除线',\n    '下标',\n    '上标',\n    '引用',\n    '无序列表',\n    '有序列表',\n    '任务',\n    '行内代码',\n    '块级代码',\n    '链接',\n    '图片',\n    '表格',\n    '图表',\n    '公式',\n    '后退一步',\n    '前进一步',\n    '保存',\n    '页面内全屏',\n    '屏幕全屏',\n    '内容预览',\n    'html代码预览',\n    '目录',\n    '源码地址',\n  ];\n  ```\n\n---\n\n### \uD83E\uDDF1 toolbarsExclude\n\n- **类型**：`Array`\n- **默认值**：`[]`\n\n  选择性不展示工具栏，内容同上。\n\n---\n\n### \uD83D\uDCAA defToolbars\n\n- **类型**：`Array<ReactNode>`\n- **默认值**：`[]`\n\n  自定义工具栏插槽，通过使用内置的`NormalToolbar`普通点击触发事件组件，`DropdownToolbar`下拉点击触发事件组件，和`ModalToolbar`弹窗组件进行扩展。将`defToolbars`插槽中的组件下标穿插在`toolbars`实现展示（这并不规范）\n\n  ```jsx\n  import { MdEditor, NormalToolbar } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const handler = () => {\n    console.log('NormalToolbar clicked!');\n  };\n\n  const toolbars = ['github', '=', 0];\n\n  const defToolbars = [\n    <NormalToolbar\n      title=\"mark\"\n      onClick={handler}\n      key=\"nt\"\n      trigger={\n        <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n          <use xlinkHref=\"#icon-mark\"></use>\n        </svg>\n      }\n    />,\n  ];\n\n  export default () => (\n    <MdEditor modelValue=\"\" toolbars={toolbars} defToolbars={defToolbars} />\n  );\n  ```\n\n  ![普通扩展工具栏](https://imzbf.github.io/md-editor-rt/imgs/normal-toolbar.gif)\n\n  ![下拉扩展工具栏](https://imzbf.github.io/md-editor-rt/imgs/dropdown-toolbar.gif)\n\n  扩展组件属性参考**内置组件**，使用示例参见[文档分支](https://github.com/imzbf/md-editor-rt/tree/docs/src/components)，提供**标记**、**表情**和**弹窗预览**扩展组件。\n\n---\n\n### \uD83E\uDE92 noPrettier\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  是否启用 prettier 优化 md 内容。\n\n---\n\n### \uD83E\uDD0F tabWidth\n\n- **类型**：`number`\n- **默认值**：`2`\n\n  编辑器一个 TAB 键等于空格数。\n\n---\n\n### \uD83D\uDCC5 tableShape\n\n- **类型**：`[number, number] \\| [number, number, number, number]`\n- **默认值**：`[6, 4]`\n\n  标题栏添加表格时，预设待选表格大小，第一个代表最大列数，第二个代表最大行数，第三个代表扩展最大列数，第四个代表扩展最大行数。\n\n  ```jsx\n  const tableShape = [8, 4];\n\n  () => <MdEditor tableShape={tableShape}>\n  ```\n\n  ![表格预设大小预览](https://imzbf.github.io/md-editor-rt/imgs/20211216165424.png)\n\n---\n\n### \uD83E\uDEA7 placeholder\n\n- **类型**：`string`\n- **默认值**：`''`\n\n  啊这-\\_-！\n\n---\n\n### \uD83E\uDDB6 footers\n\n- **类型**：`Array<'markdownTotal' | '=' | 'scrollSwitch' | number>`\n- **默认值**：`['markdownTotal', '=', 'scrollSwitch']`\n\n  页脚显示内容，`'='`左右分割，设置为`[]`不显示页脚。\n\n---\n\n### \uD83E\uDDBF defFooters\n\n- **类型**：`Array<ReactNode>`\n- **默认值**：`[]`\n\n  自定义扩展页脚。\n\n  示例代码见[文档页源码](https://github.com/imzbf/md-editor-rt/blob/docs/src/pages/Preview/index.tsx)。\n\n---\n\n### ⛵️ scrollAuto\n\n- **类型**：`boolean`\n- **默认值**：`true`\n\n  默认左右同步滚动状态。\n\n---\n\n### \uD83E\uDD79 noUploadImg\n\n- **type**: `boolean`\n- **default**: `false`\n\n  工具栏不显示上传图片入口。\n\n  ```jsx\n  <MdEditor noUploadImg />\n  ```\n\n---\n\n### \uD83D\uDD2C autoFocus\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  原生属性，文本区域自动获得焦点。\n\n---\n\n### \uD83D\uDD29 disabled\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  原生属性，禁用文本区域。\n\n---\n\n### \uD83D\uDD12 readOnly\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  原生属性，文本区域为只读。\n\n---\n\n### \uD83D\uDCCF maxLength\n\n- **类型**：`number`\n- **默认值**：``\n\n  原生属性，文本区域允许的最大字符数。\n\n---\n\n### \uD83D\uDCE5 autoDetectCode\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  是否启用自动识别粘贴代码类别，目前仅支持从`vscode`复制的内容。\n\n---\n\n### \uD83D\uDCDD completions\n\n- **类型**：`Array<CompletionSource>`\n- **默认值**：`[]`\n\n  添加额外的输入自动完成来源。\n\n  ```jsx\n  import { useMemo, useState } from 'react';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  export default () => {\n    const [t, s] = useState('');\n\n    const completions = useMemo(() => {\n      return [\n        (context) => {\n          const word = context.matchBefore(/@\\w*/);\n\n          if (word === null || (word.from == word.to && context.explicit)) {\n            return null;\n          }\n\n          return {\n            from: word.from,\n            options: [\n              {\n                label: '@imzbf',\n                type: 'text',\n              },\n            ],\n          };\n        },\n      ];\n    }, []);\n\n    return <MdEditor modelValue={t} onChange={s} completions={completions} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDCE5 showToolbarName\n\n- **类型**：`boolean`\n- **默认值**：`false`\n\n  是否在工具栏下面显示对应的文字名称\n\n![](https://imzbf.github.io/md-editor-rt/imgs/showToolbarName.jpg)\n\n---\n\n### \uD83D\uDCE5 inputBoxWidth\n\n- **类型**：`string`\n- **默认值**：`50%`\n\n  输入框默认的宽度\n\n![](https://imzbf.github.io/md-editor-rt/imgs/drag-width.jpg)\n\n---\n\n### \uD83E\uDE92 transformImgUrl\n\n- **类型**：`(imgUrl: string) => string | Promise<string>`\n- **默认值**：`t => t`\n\n  转换图片链接\n\n---\n\n### \uD83D\uDD16 catalogLayout\n\n- **类型**：`'fixed' | 'flat'`\n- **默认值**：`fixed`\n\n  \\>=5.3.0 内置的目录显示的状态，'fixed': 悬浮在内容上方，'flat': 展示在右侧\n\n---\n\n### \uD83D\uDCC7 catalogMaxDepth\n\n- **类型**：`number`\n- **默认值**：`undefined`\n\n  \\>=5.5.0 控制要显示的目录的最大深度。\n\n---\n\n## \uD83E\uDDF5 MdPreview 绑定事件\n\n### \uD83D\uDCDE onChange\n\n- **类型**：`(v: string) => void`\n\n  内容变化事件（当前与`textare`的`oninput`事件绑定，每输入一个单字即会触发）。\n\n---\n\n### \uD83D\uDE81 onHtmlChanged\n\n- **类型**：`(h: string) => void`\n\n  html 变化回调事件，用于获取预览 html 代码。\n\n---\n\n### \uD83D\uDDD2 onGetCatalog\n\n- **类型**：`(list: HeadList[]) => void`\n\n  动态获取`markdown`目录。\n\n---\n\n### \uD83D\uDD03 onRemount\n\n- **类型**：`() => void`\n\n  \\>=5.3.0 内容重新挂载事件，在这个事件中能够正确获取到内容中的节点。\n\n---\n\n## \uD83E\uDEA2 MdEditor 绑定事件\n\n除去和`MdPreivew`相同的以外：\n\n### \uD83D\uDCBE onSave\n\n- **类型**：`(v: string, h: Promise<string>) => void`\n\n  保存事件，快捷键与保存按钮均会触发。\n\n  ```jsx\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const onSave = (v, h) => {\n    console.log(v);\n\n    h.then((html) => {\n      console.log(html);\n    });\n  };\n\n  export default () => <MdEditor onSave={onSave} />;\n  ```\n\n---\n\n### \uD83D\uDCF8 onUploadImg\n\n- **类型**：`files: Array<File>, callback: (urls: string[] | { url: string; alt: string; title: string }[]) => void`\n\n  上传图片事件，弹窗会等待上传结果，务必将上传后的 urls 作为 callback 入参回传。\n\n  ```jsx\n  import { useState } from 'react';\n  import axios from 'axios';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const onUploadImg = async (files, callback) => {\n    const res = await Promise.all(\n      files.map((file) => {\n        return new Promise((rev, rej) => {\n          const form = new FormData();\n          form.append('file', file);\n\n          axios\n            .post('/api/img/upload', form, {\n              headers: {\n                'Content-Type': 'multipart/form-data',\n              },\n            })\n            .then((res) => rev(res))\n            .catch((error) => rej(error));\n        });\n      })\n    );\n\n    // 方式一\n    callback(res.map((item) => item.data.url));\n    // 方式二\n    // callback(\n    //   res.map((item: any) => ({\n    //     url: item.data.url,\n    //     alt: 'alt',\n    //     title: 'title'\n    //   }))\n    // );\n  };\n\n  export default () => {\n    const [text, setText] = useState('# Hello Editor');\n    return (\n      <MdEditor\n        modelValue={text}\n        onChange={setText}\n        onUploadImg={onUploadImg}\n      />\n    );\n  };\n  ```\n\n---\n\n### \uD83D\uDC80 onError\n\n- **类型**：`(err: InnerError) => void`\n\n  捕获执行错误事件，目前支持`Cropper`、`fullscreen`、`prettier`实例未加载完成操作、输入内容超出限制长度、`mermaid`渲染的错误。\n\n  ```ts\n  export interface InnerError {\n    name: 'Cropper' | 'fullscreen' | 'prettier' | 'overlength' | 'mermaid'; // 组件版本大于等于5.4.0才能捕获mermaid错误\n    message: string;\n    data?: any;\n    error?: Error;\n  }\n  ```\n\n  ```jsx\n  const onError = (err) => {\n    alert(err.message);\n  };\n\n  export default () => <MdEditor onError={onError} />;\n  ```\n\n---\n\n### \uD83D\uDC3E onBlur\n\n- **类型**：`(event: FocusEvent) => void`\n\n  输入框失去焦点时触发事件。\n\n  ```jsx\n  const onBlur = (err) => {\n    console.log('onBlur', e);\n  };\n\n  export default () => <MdEditor onBlur={onBlur} />;\n  ```\n\n---\n\n### \uD83D\uDD16 onFocus\n\n- **类型**：`(event: FocusEvent) => void`\n\n  输入框获得焦点时触发事件。\n\n---\n\n### \uD83D\uDD16 onInput\n\n- **类型**：`(event: Event) => void`\n\n  输入框键入内容事件。\n\n---\n\n### \uD83D\uDD16 onDrop\n\n- **类型**：`(event: DragEvent) => void`\n\n  拖放内容事件。\n\n  ```jsx\n  import { useState } from 'react';\n  import { MdEditor } from 'md-editor-rt';\n  import 'md-editor-rt/lib/style.css';\n\n  const onDrop = (e) => {\n    e.preventDefault();\n    console.log(e.dataTransfer?.files[0]);\n  };\n\n  export default () => {\n    const [text, setText] = useState('');\n    return <MdEditor modelValue={text} onChange={setText} onDrop={onDrop} />;\n  };\n  ```\n\n---\n\n### \uD83D\uDD16 onInputBoxWidthChange\n\n- **类型**：`(width: string) => void`\n\n  调整输入框宽度事件\n\n---\n\n## \uD83E\uDD31\uD83C\uDFFC 实例暴露\n\n2.5.0 版本之后，编辑器暴露了若干方法在组件实例上，用来快捷监听编辑器内部状态或对调整内部状态。\n\n```jsx\nimport { useState, useEffect, useRef } from 'react';\nimport { MdEditor, ExposeParam } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\nexport default () => {\n  const [text, setText] = useState('#Hello Editor');\n  const editorRef = useRef<ExposeParam>();\n\n  useEffect(() => {\n    editorRef.current?.on('catalog', console.log);\n  }, []);\n\n  return <MdEditor ref={editorRef} modelValue={text} onChange={setText} />;\n};\n```\n\n| Name                 | MdEditor | MdPreview |\n| -------------------- | -------- | --------- |\n| on                   | √        | \xd7         |\n| togglePageFullscreen | √        | \xd7         |\n| toggleFullscreen     | √        | \xd7         |\n| togglePreview        | √        | \xd7         |\n| togglePreviewOnly    | √        | \xd7         |\n| toggleHtmlPreview    | √        | \xd7         |\n| toggleCatalog        | √        | \xd7         |\n| triggerSave          | √        | \xd7         |\n| insert               | √        | \xd7         |\n| focus                | √        | \xd7         |\n| rerender             | √        | √         |\n| getSelectedText      | √        | \xd7         |\n| resetHistory         | √        | \xd7         |\n\n### \uD83D\uDC42\uD83C\uDFFC on\n\n监听编辑器内部状态，包括：屏幕全屏、浏览器全屏、预览文本、预览 html、目录等。\n\n- pageFullscreen\n\n  ```js\n  editorRef.current?.on('pageFullscreen', (status) => console.log(status));\n  ```\n\n- fullscreen\n\n  ```js\n  editorRef.current?.on('fullscreen', (status) => console.log(status));\n  ```\n\n- preview\n\n  ```js\n  editorRef.current?.on('preview', (status) => console.log(status));\n  ```\n\n- previewOnly\n\n  ```js\n  editorRef.current?.on('previewOnly', (status) => console.log(status));\n  ```\n\n- htmlPreview\n\n  ```js\n  editorRef.current?.on('htmlPreview', (status) => console.log(status));\n  ```\n\n- catalog\n\n  ```js\n  editorRef.current?.on('catalog', (status) => console.log(status));\n  ```\n\n---\n\n### \uD83D\uDCBB togglePageFullscreen\n\n切换页面内全屏。\n\n```js\neditorRef.current?.togglePageFullscreen(true);\n```\n\n> 不设置入参切换为相反状态\n\n---\n\n### \uD83D\uDDA5 toggleFullscreen\n\n切换屏幕全屏。\n\n```js\neditorRef.current?.toggleFullscreen(true);\n```\n\n> 不设置入参切换为相反状态\n\n---\n\n### \uD83D\uDCD6 togglePreview\n\n切换是否显示预览。\n\n```js\neditorRef.current?.togglePreview(true);\n```\n\n> 不设置入参切换为相反状态\n\n---\n\n### \uD83D\uDCD6 togglePreviewOnly\n\n切换仅预览状态。\n\n```js\neditorRef.current?.togglePreviewOnly(true);\n```\n\n> 不设置入参切换为相反状态\n\n---\n\n### \uD83D\uDCFC toggleHtmlPreview\n\n切换是否显示 html 预览。\n\n```js\neditorRef.current?.toggleHtmlPreview(true);\n```\n\n> 不设置入参切换为相反状态\n\n---\n\n### \uD83E\uDDEC toggleCatalog\n\n切换是否显示目录。\n\n```js\neditorRef.current?.toggleCatalog(true);\n```\n\n> 不设置入参切换为相反状态\n\n---\n\n### \uD83D\uDCBE triggerSave\n\n触发保存。\n\n```js\neditorRef.current?.triggerSave();\n```\n\n---\n\n### \uD83D\uDC89 insert\n\n手动向文本框插入内容。\n\n```js\n/**\n * @params selectedText 选中的内容\n */\neditorRef.current?.insert((selectedText) => {\n  /**\n   * @return targetValue    待插入内容\n   * @return select         插入后是否自动选中内容，默认：true\n   * @return deviationStart 插入后选中内容鼠标开始位置，默认：0\n   * @return deviationEnd   插入后选中内容鼠标结束位置，默认：0\n   */\n  return {\n    targetValue: `${selectedText}`,\n    select: true,\n    deviationStart: 0,\n    deviationEnd: 0,\n  };\n});\n```\n\n---\n\n### \uD83C\uDFAF focus\n\n手动聚焦输入框。\n\n```ts\nimport type { FocusOption } from 'md-editor-rt';\n\nconst option: FocusOption | undefined = 'start';\n\n// 聚焦时光标的位置，不提供默认上次失焦时的位置\neditorRef.current?.focus(option);\n```\n\n```ts\ntype FocusOption =\n  | 'start'\n  | 'end'\n  | {\n      // 选中的开始位置，默认光标位置\n      rangeAnchor?: number;\n      // 选中的结束位置，默认光标位置\n      rangeHead?: number;\n      // 光标的位置\n      cursorPos: number;\n    };\n```\n\n---\n\n### ✒️ rerender\n\n手动重新渲染内容。\n\n```js\neditorRef.current?.rerender();\n```\n\n---\n\n### \uD83D\uDD0D getSelectedText\n\n获取当前选中的文字。\n\n```js\nconsole.log(editorRef.current?.getSelectedText());\n```\n\n---\n\n### \uD83D\uDDD1 resetHistory\n\n清除当前的历史记录。\n\n---\n\n### \uD83C\uDF9B domEventHandlers\n\n支持监听全部的 dom 事件。\n\n```js\neditorRef.current?.domEventHandlers({\n  compositionstart: () => {\n    console.log('compositionstart');\n  },\n});\n```\n\n---\n\n### \uD83C\uDF9B execCommand\n\n通过触发器向编辑器插入内容。\n\n```js\neditorRef.current?.execCommand('bold');\n```\n\n---\n\n### \uD83D\uDD16 getEditorView\n\n获取 codemirror 实例。\n\n---\n\n## \uD83D\uDCB4 配置编辑器\n\n使用`config(option: ConfigOption)`方法，可以对构建实例进行定制。\n\n!!! warning\n\n我们建议你在项目入口配置，例如 vite 创建的项目中的 main.js。不要在组件中去调用 `config` ！\n\n!!!\n\n### \uD83E\uDDAA codeMirrorExtensions\n\n根据主题和内部默认的 codeMirror 扩展自定义新的扩展。\n\n```ts\ntype CodeMirrorExtensions = (\n  theme: Themes,\n  extensions: Array<Extension>,\n  keyBindings: Array<KeyBinding>,\n  options: {\n    editorId: string;\n  }\n) => Array<Extension>;\n```\n\n使用示例：编辑器默认不显示输入框的行号，需要手动添加扩展\n\n```js\nimport { config } from 'md-editor-rt';\nimport { lineNumbers } from '@codemirror/view';\n\nconfig({\n  codeMirrorExtensions(_theme, extensions) {\n    return [...extensions, lineNumbers()];\n  },\n});\n```\n\n---\n\n### \uD83C\uDF64 markdownItConfig\n\n自定义 markdown-it 核心库扩展、属性等。\n\n```ts\ntype MarkdownItConfig = (\n  md: markdownit,\n  options: {\n    editorId: string;\n  }\n) => void;\n```\n\n使用示例：配置使用`markdown-it-anchor`并在标题右侧显示一个超链接符号\n\n```js\nimport { config } from 'md-editor-rt';\nimport ancher from 'markdown-it-anchor';\n\nconfig({\n  markdownItConfig(mdit) {\n    mdit.use(ancher, {\n      permalink: true,\n    });\n  },\n});\n```\n\n---\n\n### \uD83C\uDF64 markdownItPlugins\n\n挑选、新增 markdown-it 核心库已预设的扩展。\n\n```ts\ntype MarkdownItPlugins = (\n  plugins: Array<MarkdownItConfigPlugin>,\n  options: {\n    editorId: string;\n  }\n) => Array<MarkdownItConfigPlugin>;\n```\n\n使用示例：修改图片的类名\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  markdownItPlugins(plugins) {\n    return plugins.map((p) => {\n      if (p.type === 'image') {\n        return {\n          ...p,\n          options: {\n            ...p.options,\n            classes: 'my-class',\n          },\n        };\n      }\n\n      return p;\n    });\n  },\n});\n```\n\n内置的扩展列表\n\n| 类型       | 选项                                                                                                                          |\n| ---------- | ----------------------------------------------------------------------------------------------------------------------------- |\n| image      | [URL](https://github.com/Antonio-Laguna/markdown-it-image-figures?tab=readme-ov-file#options)                                 |\n| admonition | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/admonition/index.ts#L9) |\n| taskList   | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/task/index.ts#L10)      |\n| heading    | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/heading/index.ts#L5)    |\n| code       | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/code/index.ts#L16)      |\n| sub        | 没有                                                                                                                          |\n| sup        | 没有                                                                                                                          |\n| katex      | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/katex/index.ts#L18)     |\n| mermaid    | [URL](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/markdownIt/mermaid/index.ts#L7)    |\n\n[添加插件的源码](https://github.com/imzbf/md-editor-v3/blob/develop/packages/MdEditor/layouts/Content/composition/useMarkdownIt.ts#L95)\n\n[插件对应的源码](https://github.com/imzbf/md-editor-v3/tree/develop/packages/MdEditor/layouts/Content/markdownIt)\n\n---\n\n### \uD83C\uDF59 editorConfig\n\n编辑器常规配置，语言、`mermaid`默认模板、渲染延迟：\n\n#### \uD83C\uDF5A languageUserDefined\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorConfig: {\n    // 语言\n    languageUserDefined: {\n      'my-lang': {\n        toolbarTips: {\n          bold: '加粗',\n          underline: '下划线',\n          italic: '斜体',\n          strikeThrough: '删除线',\n          title: '标题',\n          sub: '下标',\n          sup: '上标',\n          quote: '引用',\n          unorderedList: '无序列表',\n          orderedList: '有序列表',\n          codeRow: '行内代码',\n          code: '块级代码',\n          link: '链接',\n          image: '图片',\n          table: '表格',\n          mermaid: 'mermaid图',\n          katex: '公式',\n          revoke: '后退',\n          next: '前进',\n          save: '保存',\n          prettier: '美化',\n          pageFullscreen: '浏览器全屏',\n          fullscreen: '屏幕全屏',\n          preview: '预览',\n          previewOnly: '仅预览',\n          htmlPreview: 'html代码预览',\n          catalog: '目录',\n          github: '源码地址',\n        },\n        titleItem: {\n          h1: '一级标题',\n          h2: '二级标题',\n          h3: '三级标题',\n          h4: '四级标题',\n          h5: '五级标题',\n          h6: '六级标题',\n        },\n        imgTitleItem: {\n          link: '添加链接',\n          upload: '上传图片',\n          clip2upload: '裁剪上传',\n        },\n        linkModalTips: {\n          linkTitle: '添加链接',\n          imageTitle: '添加图片',\n          descLabel: '链接描述：',\n          descLabelPlaceHolder: '请输入描述...',\n          urlLabel: '链接地址：',\n          urlLabelPlaceHolder: '请输入链接...',\n          buttonOK: '确定',\n        },\n        clipModalTips: {\n          title: '裁剪图片上传',\n          buttonUpload: '上传',\n        },\n        copyCode: {\n          text: '复制代码',\n          successTips: '已复制！',\n          failTips: '复制失败！',\n        },\n        mermaid: {\n          flow: '流程图',\n          sequence: '时序图',\n          gantt: '甘特图',\n          class: '类图',\n          state: '状态图',\n          pie: '饼图',\n          relationship: '关系图',\n          journey: '旅程图',\n        },\n        katex: {\n          inline: '行内公式',\n          block: '块级公式',\n        },\n        footer: {\n          markdownTotal: '字数',\n          scrollAuto: '同步滚动',\n        },\n      },\n    },\n  },\n});\n```\n\n#### \uD83C\uDF58 mermaidTemplate\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorConfig: {\n    // mermaid模板\n    mermaidTemplate: {\n      // 流程图\n      flow: `flow tempalte`,\n      // 时序图\n      sequence: `sequence template`,\n      // 甘特图\n      gantt: `gantt template`,\n      // 类图\n      class: `class template`,\n      // 状态图\n      state: `state template`,\n      // 饼图\n      pie: `pie template`,\n      // 关系图\n      relationship: `relationship template`,\n      // 旅程图\n      journey: `journey template`,\n    },\n  },\n});\n```\n\n#### \uD83C\uDF65 renderDelay\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorConfig: {\n    // 输入渲染延迟（ms）\n    renderDelay: 0,\n  },\n});\n```\n\n---\n\n#### \uD83C\uDF65 zIndex\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorConfig: {\n    // 内部弹窗的zIndex\n    zIndex: 2000,\n  },\n});\n```\n\n---\n\n### \uD83E\uDD60 editorExtensions\n\n类型如下，用于配置编辑器内部的扩展\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorExtensions: { highlight: { js: 'https://xxx.cc' } },\n});\n```\n\n```ts\nexport interface EditorExtensions {\n  highlight?: {\n    instance?: any;\n    js?: string;\n    css?: {\n      [key: string]: {\n        light: string;\n        dark: string;\n      };\n    };\n  };\n  prettier?: {\n    // >= 2.2.0\n    prettierInstance?: any;\n    parserMarkdownInstance?: any;\n\n    standaloneJs?: string;\n    parserMarkdownJs?: string;\n  };\n  cropper?: {\n    instance?: any;\n    js?: string;\n    css?: string;\n  };\n  screenfull?: {\n    instance?: any;\n    js?: string;\n  };\n  mermaid?: {\n    instance?: any;\n    js?: string;\n    // >=5.4.0，是否允许缩放查看mermaid模块\n    enableZoom?: boolean;\n  };\n  katex?: {\n    instance?: any;\n    js?: string;\n    css?: string;\n  };\n}\n```\n\n---\n\n### \uD83E\uDD60 editorExtensionsAttrs\n\n同步添加 CDN 链接标签的上属性，类型与`editorExtensions`一直，值类型是`HTMLElementTagNameMap<script|link>` 内部提供所有链接的`integrity`值，使用方式如下：\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  editorExtensionsAttrs: {\n    highlight: {\n      js: {\n        className: 'hglh-js',\n      },\n      css: {\n        atom: {\n          light: {\n            className: 'atom-light-css',\n          },\n          dark: {\n            className: 'atom-dark-css',\n          },\n        },\n      },\n    },\n  },\n});\n```\n\n使用内置的基础属性配置示例：\n\n```js\nimport { config, editorExtensionsAttrs } from 'md-editor-rt';\n\nconfig({\n  editorExtensionsAttrs,\n});\n```\n\n!!! warning 提醒\n\n不要尝试在 editorExtensionsAttrs 定义 script 的 src\\onload\\id，link 的 rel\\href\\id 它们会被默认值覆盖\n\n!!!\n\n---\n\n### \uD83C\uDFA8 mermaidConfig\n\nmermaid 配置项，[配置详情](https://mermaid.js.org/config/schema-docs/config.html)\n\n```js\nimport { config } from 'md-editor-rt';\nconfig({\n  mermaidConfig(base: any) {\n    return {\n      ...base,\n      logLevel: 'error',\n    };\n  },\n});\n```\n\n---\n\n### \uD83D\uDD27 katexConfig\n\nkatex 配置项，[配置详情](https://katex.org/docs/options)\n\n```js\nimport { config } from 'md-editor-rt';\n\nconfig({\n  katexConfig(base: any) {\n    return {\n      ...base,\n      strict: false,\n    };\n  },\n});\n```\n\n---\n\n## \uD83E\uDEA1 快捷键\n\n主要以`CTRL`搭配对应功能英文单词首字母，冲突项添加`SHIFT`，再冲突替换为`ALT`。\n\n!!! warning 注意事项\n\n快捷键仅在输入框获取到焦点时可用！\n\n!!!\n\n| 键位                   | 功能       | 说明                                                          |\n| ---------------------- | ---------- | ------------------------------------------------------------- |\n| TAB                    | 空格       | 通过`tabWidth`属性预设 TAB 键位新增空格长度，默认 2，支持多行 |\n| SHIFT + TAB            | 取消空格   | 同上，一次取消两个空格，支持多行                              |\n| CTRL + C               | 复制       | 选中时复制选中内容，未选中时复制当前行内容                    |\n| CTRL + X               | 剪切       | 选中时剪切选中内容，未选中时剪切当前行                        |\n| CTRL + D               | 删除       | 选中时删除选中内容，未选中时删除当前行                        |\n| CTRL + S               | 保存       | 触发编辑器的`onSave`回调                                      |\n| CTRL + B               | 加粗       | `**加粗**`                                                    |\n| CTRL + U               | 下划线     | `<u>下划线</u>`                                               |\n| CTRL + I               | 斜体       | `*斜体*`                                                      |\n| CTRL + 1-6             | 1-6 级标题 | `# 标题`                                                      |\n| CTRL + ↑               | 上角标     | `<sup>上角标</sup>`                                           |\n| CTRL + ↓               | 下角标     | `<sub>下角标</sub>`                                           |\n| CTRL + O               | 有序列表   | `1. 有序列表`                                                 |\n| CTRL + L               | 链接       | `[链接](https://github.com/imzbf)`                            |\n| CTRL + Z               | 撤回       | 触发编辑器内内容撤回，与系统无关                              |\n| CTRL + F               | 查找替换   |                                                               |\n| CTRL + SHIFT + S       | 删除线     | `~删除线~`                                                    |\n| CTRL + SHIFT + U       | 无序列表   | `- 无序列表`                                                  |\n| CTRL + SHIFT + C       | 块级代码   | 多行代码块                                                    |\n| CTRL + SHIFT + I       | 图片链接   | `![图片](https://github.com/imzbf)`                           |\n| CTRL + SHIFT + Z       | 前进一步   | 触发编辑器内内容前进，与系统无关                              |\n| CTRL + SHIFT + F       | 美化内容   |                                                               |\n| CTRL + ALT + C         | 行内代码   | 行内代码块                                                    |\n| CTRL + SHIFT + ALT + T | 表格       | `\\|表格\\|`                                                    |\n\n## \uD83E\uDEA4 内置组件\n\n按需引用编辑器的扩展组件，例如：`import { DropdownToolbar } from 'md-editor-rt'`。\n\n!!! info 内置属性提示\n\n为了帮助开发者快速插入和使用编辑器的属性，编辑器组件已经默认向头部工具栏和尾部工具栏中的扩展组件添加了下面的属性的值（如果你也提供了，那么会优先使用你提供的内容），更详细的参考示例：[ExportPDF](https://github.com/imzbf/md-editor-extension/blob/main/packages/rt/components/ExportPDF/ExportPDF.tsx#L71)\n\n| 名称         | defToolbars | defFooters |\n| ------------ | ----------- | ---------- |\n| insert       | √           | \xd7          |\n| theme        | √           | √          |\n| previewtheme | √           | \xd7          |\n| codeTheme    | √           | \xd7          |\n| language     | √           | √          |\n| disabled     | √           | √          |\n\n例子：\n\n```jsx\nconst HeaderTool = (props) => {\n  console.log('==', props);\n  // == { insert: (...)=> {...}, theme: 'light', ... }\n\n  return <NormalToolbar>触发</NormalToolbar>;\n};\n\nconst toolbars = [0];\nconst defToolbars = [<HeaderTool key=\"key\" />];\n\nconst MyEditor1 = () => {\n  return <MdEditor toolbars={toolbars} defToolbars={defToolbars} />;\n};\n\n// ===================================\n\nconst FooterTool = (props) => {\n  console.log('==', props);\n  // == { theme: 'light', disabled: false, language: 'zh-CN' }\n\n  return <NormalFooterToolbar>触发</NormalFooterToolbar>;\n};\n\nconst footers = [0];\nconst defFooters = [<FooterTool key=\"key\" />];\n\nconst MyEditor2 = () => {\n  return <MdEditor footers={footers} defFooters={defFooters} />;\n};\n```\n\n!!!\n\n### \uD83D\uDC23 NormalToolbar\n\n- **props**\n\n  - **title**: `string`，非必须，作为工具栏上的 hover 提示。\n  - **children**: `ReactNode`，非必须，通常是个图标，用来展示在工具栏上。\n  - ~~**trigger**~~: `ReactNode`，非必须，已废弃，同上。\n\n- **events**\n\n  - **onClick**: `(e: MouseEvent) => void`，必须，点击事件。\n\n```jsx\nimport { useCallback, useState } from 'react';\nimport { MdEditor, NormalToolbar, InsertContentGenerator } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\ninterface MyToolbarProps {\n  insert?: (generator: InsertContentGenerator) => void;\n}\n\n/**\n * `insert`方法会由编辑器自动向组件的组件注入。\n */\nconst MyToolbar = ({ insert = () => {} }: MyToolbarProps) => {\n  const onClick = useCallback(() => {\n    insert((selectedText) => {\n      /**\n       * targetValue    待插入内容\n       * select         插入后是否自动选中内容，默认：true\n       * deviationStart 插入后选中内容鼠标开始位置，默认：0\n       * deviationEnd   插入后选中内容鼠标结束位置，默认：0\n       */\n      return {\n        targetValue: `==${selectedText}==`,\n        select: true,\n        deviationStart: 0,\n        deviationEnd: 0,\n      };\n    });\n  }, [insert]);\n\n  return (\n    <NormalToolbar title=\"mark\" onClick={onClick} key=\"mark-toolbar\">\n      <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n        <use xlinkHref=\"#icon-mark\"></use>\n      </svg>\n    </NormalToolbar>\n  );\n};\n\nexport default () => {\n  const [value, setValue] = useState('');\n\n  return (\n    <MdEditor\n      modelValue={value}\n      id=\"md-prev\"\n      toolbars={['bold', 0, '=', 'github']}\n      defToolbars={[<MyToolbar />]}\n      onChange={setValue}\n    />\n  );\n};\n```\n\n[标记组件的源码](https://github.com/imzbf/md-editor-extension/blob/develop/packages/rt/components/Mark/Mark.tsx)\n\n---\n\n### \uD83D\uDC3C DropdownToolbar\n\n- **props**\n\n  - **title**: `string`，非必须，作为工具栏上的 hover 提示。\n  - **visible**: `boolean`，必须，下拉状态。\n  - **children**: `ReactNode`，非必须，通常是个图标，用来展示在工具栏上。\n  - ~~**trigger**~~: `ReactNode`，非必须，已废弃，同上。\n  - **overlay**: `ReactNode`，必须，下拉框中的内容。\n\n- **events**\n\n  - **onChange**: `(visible: boolean) => void`，必须，状态变化事件。\n\n```jsx\nimport { useCallback, useState } from 'react';\nimport { MdEditor, DropdownToolbar } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\n/**\n * `insert`方法会由编辑器自动向组件的组件注入。\n */\nconst MyToolbar = ({ insert = () => {} }) => {\n  const [visible, setVisible] = useState(false);\n\n  const onClick = useCallback(() => {\n    insert((selectedText) => {\n      /**\n       * targetValue    待插入内容\n       * select         插入后是否自动选中内容，默认：true\n       * deviationStart 插入后选中内容鼠标开始位置，默认：0\n       * deviationEnd   插入后选中内容鼠标结束位置，默认：0\n       */\n      return {\n        targetValue: `==${selectedText}==`,\n        select: true,\n        deviationStart: 0,\n        deviationEnd: 0,\n      };\n    });\n  }, [insert]);\n\n  return (\n    <DropdownToolbar\n      visible={visible}\n      onChange={setVisible}\n      overlay={\n        <ul>\n          <li onClick={onClick}>option 1</li>\n          <li>option 2</li>\n        </ul>\n      }\n      key=\"emoji-toolbar\"\n    >\n      <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n        <use xlinkHref=\"#icon-emoji\"></use>\n      </svg>\n    </DropdownToolbar>\n  );\n};\n\nconst toolbars = ['bold', 0, '=', 'github'];\nconst defToolbars = [<MyToolbar key=\"key\" />];\n\nexport default () => {\n  const [value, setValue] = useState('');\n\n  return (\n    <MdEditor\n      modelValue={value}\n      id=\"md-prev\"\n      toolbars={toolbars}\n      defToolbars={defToolbars}\n      onChange={setValue}\n    />\n  );\n};\n```\n\n[Emoji 组件的源码](https://github.com/imzbf/md-editor-extension/blob/develop/packages/rt/components/Emoji/Emoji.tsx)\n\n---\n\n### \uD83E\uDD89 ModalToolbar\n\n- **props**\n\n  - **title**: `string`，非必须，作为工具栏上的 hover 提示。\n  - **modalTitle**: `ReactNode`，非必须，弹窗的标题。\n  - **visible**: `boolean`，必须，弹窗显示状态。\n  - **width**: `string`，非必须，弹窗宽度，默认`auto`。\n  - **height**: `string`，同`width`。\n  - **showAdjust**: `boolean`，非必须，是否显示弹窗全屏按钮。\n  - **isFullscreen**: `boolean`，显示全屏按钮时必须，弹窗全屏状态。\n  - **trigger**: `ReactNode`，必须，通常是个图标，用来展示在工具栏上。\n  - **children**: `ReactNode`，必须，弹窗中的内容。\n  - **className**: `string`，`^4.16.8`，非必须，类名。\n  - **style**: `CSSProperties`，`^4.16.8`，非必须，样式。\n  - **showMask**: `boolean`，`^4.16.8`，非必须，是否展示遮罩层，默认 true。\n\n- **events**\n\n  - **onClick**: `() => void`，必须，工具栏点击事件。\n  - **onClose**: `() => void`，必须，弹窗点击关闭事件。\n  - **onAdjust**: `(val: boolean) => void`，弹窗全屏按钮点击事件。\n\n```jsx\nimport { useCallback, useState } from 'react';\nimport { MdEditor, ModalToolbar } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\n/**\n * `insert`方法会由编辑器自动向组件的组件注入。\n */\nconst MyToolbar = ({ insert = () => {} }) => {\n  const [visible, setVisible] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  const onClick = useCallback(() => {\n    setVisible(true);\n  }, []);\n\n  const onClose = useCallback(() => {\n    setVisible(false);\n  }, []);\n\n  const onAdjust = useCallback(() => {\n    setIsFullscreen((i) => !i);\n  }, []);\n\n  const insertHandler = useCallback(() => {\n    insert((selectedText) => {\n      /**\n       * targetValue    待插入内容\n       * select         插入后是否自动选中内容，默认：true\n       * deviationStart 插入后选中内容鼠标开始位置，默认：0\n       * deviationEnd   插入后选中内容鼠标结束位置，默认：0\n       */\n      return {\n        targetValue: `==${selectedText}==`,\n        select: true,\n        deviationStart: 0,\n        deviationEnd: 0,\n      };\n    });\n  }, [insert]);\n\n  return (\n    <ModalToolbar\n      visible={visible}\n      isFullscreen={isFullscreen}\n      showAdjust\n      title=\"hover-title\"\n      modalTitle=\"modalTitle\"\n      width=\"870px\"\n      height=\"600px\"\n      onClick={onClick}\n      onClose={onClose}\n      onAdjust={onAdjust}\n      trigger={\n        <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n          <use xlinkHref=\"#icon-read\"></use>\n        </svg>\n      }\n    >\n      <div\n        style={{\n          height: '100%',\n          padding: '20px',\n          overflow: 'auto',\n        }}\n      >\n        <button onClick={insertHandler}>click me</button>\n      </div>\n    </ModalToolbar>\n  );\n};\n\nconst toolbars = ['bold', 0, '=', 'github'];\nconst defToolbars = [<MyToolbar key=\"key\" />];\n\nexport default () => {\n  const [value, setValue] = useState('');\n  return (\n    <MdEditor\n      modelValue={value}\n      id=\"md-prev\"\n      toolbars={toolbars}\n      defToolbars={defToolbars}\n      onChange={setValue}\n    />\n  );\n};\n```\n\n[ExportPDF 组件的源码](https://github.com/imzbf/md-editor-extension/blob/develop/packages/rt/components/ExportPDF/ExportPDF.tsx)\n\n---\n\n### \uD83D\uDC3B MdCatalog\n\n- **props**\n\n  - **editorId**: `string`，必须，对应编辑器的`id`，在内部注册目录变化监听事件。\n  - **className**: `string`，非必须，目录组件最外层类名。\n  - **mdHeadingId**: `mdHeadingId`，非必须，特殊化编辑器标题的算法，与编辑器相同。\n  - **scrollElement**: `string | HTMLElement`，非必须，为字符时应是一个元素选择器。仅预览模式中，整页滚动时，设置为`document.documentElement`。⚠️ 该元素必须定位（如相对、绝对或固定），且内容可滚动。\n  - **theme**: `'light' | 'dark'`，非必须，当需要切换主题时提供，同编辑器的`theme`。\n  - **offsetTop**: `number`，非必须，标题距离顶部该像素时高亮当前目录项，默认 20 像素。\n  - **scrollElementOffsetTop**: `number`，非必须，滚动区域的固定顶部高度，默认 0。\n  - **catalogMaxDepth**: `number`，`^5.5.0`，非必须，控制要显示的目录的最大深度。\n\n- **events**\n\n  - **onClick**: `(e: MouseEvent, t: TocItem) => void`，非必须，导航点击事件。\n  - **onActive**: `(heading: HeadList | undefined) => void`，非必须，高亮的标题变化事件。\n\n> `scrollElement`说明：仅预览下，该元素必须已定位的并且支持滚动。\n\n```jsx\nimport { MdPreview, MdCatalog } from 'md-editor-rt';\nimport 'md-editor-rt/lib/preview.css';\n\nconst editorId = 'my-editor';\n\nexport default () => {\n  const [state] = useState({\n    text: '# 标题',\n    scrollElement: document.documentElement,\n  });\n\n  return (\n    <>\n      {/* 保证editorId是相同的 */}\n      <MdPreview id={editorId} modelValue={state.text} />\n      <MdCatalog editorId={editorId} scrollElement={state.scrollElement} />\n    </>\n  );\n};\n```\n\n---\n\n### \uD83D\uDEF8 MdModal\n\n编辑器内部的弹窗组件，它通常配合下拉工具栏组件使用。\n\n- **props**\n\n  - **title**: `ReactNode`，非必须，弹窗标题栏。\n  - **visible**: `boolean`，必须，弹窗显示状态。\n  - **width**: `string`，非必须，弹窗宽度，默认`auto`。\n  - **height**: `string`，同`width`。\n  - **showAdjust**: `boolean`，非必须，是否显示弹窗全屏按钮。\n  - **isFullscreen**: `boolean`，显示全屏按钮时必须，弹窗全屏状态。\n  - **children**: `ReactNode`，非必须，弹窗显示的内容。\n  - **className**: `string`，非必须，类名。\n  - **style**: `CSSProperties`，非必须，样式。\n  - **showMask**: `boolean`，`^4.16.8`，非必须，是否展示遮罩层，默认 true。\n\n- **events**\n\n  - **onClose**: `() => void`，必须，弹窗点击关闭事件。\n  - **onAdjust**: `(val: boolean) => void`，弹窗全屏按钮点击事件。\n\n```jsx\nimport { useCallback, useState } from 'react';\nimport { MdEditor, DropdownToolbar, MdModal } from 'md-editor-rt';\nimport 'md-editor-rt/lib/style.css';\n\n/**\n * `insert`方法会由编辑器自动向组件的组件注入。\n */\nconst MyToolbar = () => {\n  const [visible, setVisible] = useState(false);\n  const [mVisible, setMvisible] = useState(false);\n\n  const onClick = useCallback(() => {\n    setMvisible(true);\n  }, []);\n\n  const onClose = useCallback(() => {\n    setMvisible(false);\n  }, []);\n\n  return (\n    <>\n      <DropdownToolbar\n        visible={visible}\n        onChange={setVisible}\n        overlay={\n          <ul>\n            <li onClick={onClick}>option 1</li>\n            <li>option 2</li>\n          </ul>\n        }\n        key=\"emoji-toolbar\"\n      >\n        <svg className=\"md-editor-icon\" aria-hidden=\"true\">\n          <use xlinkHref=\"#icon-emoji\"></use>\n        </svg>\n      </DropdownToolbar>\n      <MdModal title=\"title\" visible={mVisible} onClose={onClose}>\n        Content, Content\n      </MdModal>\n    </>\n  );\n};\n\nconst toolbars = ['bold', 0, '=', 'github'];\nconst defToolbars = [<MyToolbar key=\"key\" />];\n\nexport default () => {\n  const [value, setValue] = useState('');\n\n  return (\n    <MdEditor\n      modelValue={value}\n      id=\"md-prev\"\n      toolbars={toolbars}\n      defToolbars={defToolbars}\n      onChange={setValue}\n    />\n  );\n};\n```\n\n---\n\n### \uD83D\uDEF8 NormalFooterToolbar\n\n通用的页脚工具组件\n\n- **events**\n\n  - **onClick**: `(e: MouseEvent) => void`，非必须，点击事件。\n\n- **slots**\n\n  - **children**: `ReactNode`，必须，内容。\n\n```jsx\nimport { MdEditor, NormalFooterToolbar } from 'md-editor-rt';\n\nconst FooterTool = (props) => {\n  return <NormalFooterToolbar>触发</NormalFooterToolbar>;\n};\n\nconst footers = [0];\nconst defFooters = [<FooterTool key=\"key\" />];\n\nexport default () => {\n  return <MdEditor footers={footers} defFooters={defFooters} />;\n};\n```\n\n---\n\n## \uD83E\uDEA4 内部配置\n\n```js\nimport {\n  allToolbar,\n  allFooter,\n  zh_CN,\n  en_US,\n  editorExtensionsAttrs,\n} from 'md-editor-rt';\n\nconsole.log(allToolbar, allFooter, zh_CN, en_US, editorExtensionsAttrs);\n```\n\n## \uD83D\uDCE6 内部工具\n\n### \uD83E\uDDF9 clearSideEffects\n\n`>=5.0.0`\n\n清空组件带来的副作用，例如：使用 CDN 嵌入的链接，为了保证多个组件能够正常使用，组件在卸载时不会主动移除\n\n```js\nimport { clearSideEffects } from 'md-editor-rt';\n\nclearSideEffects();\n```\n\n!!! warning\n\n这会删除掉页面中的 CDN 引用，如果当前页面还存在该组件实例，请不要这样做！\n\n!!!\n\n### XSSPlugin\n\n`>=5.0.0`\n\n使用示例：[添加 xss 扩展](https://imzbf.github.io/md-editor-rt/zh-CN/demo#%F0%9F%94%92%20添加%20xss%20扩展)\n\n## ✍️ 编辑此页面\n\n[doc-zh-CN](https://github.com/imzbf/md-editor-rt/blob/dev-docs/public/doc-zh-CN.md)\n"})]})}}},n=>{var e=e=>n(n.s=e);n.O(0,[208,636,6593,8792],()=>e(8613)),_N_E=n.O()}]);